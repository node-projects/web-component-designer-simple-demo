export class PropertyChangedArgs {
    constructor(newValue, oldValue) {
        this.newValue = newValue;
        this.oldValue = oldValue;
    }
    oldValue;
    newValue;
}
export class TypedEvent {
    listeners = [];
    listenersOncer = [];
    listenerSingle = null;
    on = (listener) => {
        this.listeners.push(listener);
        return {
            dispose: () => this.off(listener)
        };
    };
    single = (listener) => {
        this.listenerSingle = listener;
        return {
            dispose: () => { if (this.listenerSingle === listener)
                this.listenerSingle = null; }
        };
    };
    once = (listener) => {
        this.listenersOncer.push(listener);
    };
    off = (listener) => {
        let callbackIndex = this.listeners.indexOf(listener);
        if (callbackIndex > -1)
            this.listeners.splice(callbackIndex, 1);
    };
    emit = (event) => {
        this.listeners.forEach((listener) => listener(event));
        if (this.listenersOncer.length > 0) {
            const toCall = this.listenersOncer;
            this.listenersOncer = [];
            toCall.forEach(listener => listener(event));
        }
        if (this.listenerSingle) {
            this.listenerSingle(event);
        }
    };
    pipe = (te) => {
        return this.on((e) => te.emit(e));
    };
}
