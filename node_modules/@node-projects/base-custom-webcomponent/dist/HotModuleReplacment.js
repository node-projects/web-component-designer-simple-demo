import { BaseCustomWebComponentNoAttachedTemplate } from "./BaseCustomWebComponent";
export class HotModuleReplacment {
    static changesFetcher;
    static instances = [];
    static classes = new Set();
    static initHMR(fetchChangedFiles) {
        HotModuleReplacment.changesFetcher = fetchChangedFiles;
        let customElementsRegistry = window.customElements;
        const registry = {};
        registry.define = function (name, constructor, options) {
            HotModuleReplacment.classes.add(constructor);
            customElementsRegistry.define(name, constructor, options);
        };
        registry.get = function (name) {
            return customElementsRegistry.get(name);
        };
        registry.upgrade = function (node) {
            return customElementsRegistry.upgrade(node);
        };
        registry.whenDefined = function (name) {
            return customElementsRegistry.whenDefined(name);
        };
        Object.defineProperty(window, "customElements", {
            get() {
                return registry;
            }
        });
        BaseCustomWebComponentNoAttachedTemplate.instanceCreatedCallback = (i) => {
            HotModuleReplacment.instances.push(new WeakRef(i));
            HotModuleReplacment.classes.add(i.constructor);
        };
        HotModuleReplacment.startPolling();
    }
    static startPolling(interval = 100) {
        setTimeout(() => {
            HotModuleReplacment.pollForChanges(interval);
        }, interval);
    }
    static async pollForChanges(interval) {
        let changes = await HotModuleReplacment.changesFetcher();
        if (changes != null) {
            for (let file of changes) {
                HotModuleReplacment.assertFileType(file);
            }
        }
        setTimeout(() => {
            HotModuleReplacment.pollForChanges(interval);
        }, interval);
    }
    static assertFileType(file) {
        switch (file.trim().toLowerCase().split(".").pop()) {
            case "css":
                console.warn("ðŸ”¥ Hot reload - css: " + file);
                HotModuleReplacment.reloadCss(file);
                break;
            case "js":
            case "cjs":
            case "mjs":
                console.warn("ðŸ”¥ Hot reload - js: " + file);
                HotModuleReplacment.reloadJs(file);
                break;
            default:
                break;
        }
    }
    static async reloadJs(file) {
        let oldDefine = customElements.define;
        customElements.define = () => null;
        let imported_modules = await import("../../" + file + "?reload=" + new Date().getTime());
        customElements.define = oldDefine;
        let changedElements = [];
        for (let module in imported_modules) {
            changedElements.push(imported_modules[module]);
        }
        for (let element of changedElements) {
            let i = HotModuleReplacment.instances.length;
            while (i--) {
                let instanceRef = HotModuleReplacment.instances[i];
                let instance = instanceRef.deref();
                if (instance) {
                    if (element.name == instance.constructor.name) {
                        instance._hmrCallback(element);
                    }
                }
                else {
                    HotModuleReplacment.instances.splice(i, 1);
                }
            }
        }
        HotModuleReplacment.classes.forEach((c) => {
            for (let element of changedElements) {
                //@ts-ignore
                if (c.name == element.name) {
                    // Gets all attribute-properties of class
                    let properties = Object.getOwnPropertyNames(c);
                    for (let property of properties) {
                        if (property == 'prototype' || property == 'name' || property == 'length')
                            continue;
                        delete c[property];
                        try {
                            c[property] = element[property];
                            //@ts-ignore
                        }
                        catch (err) {
                            console.error("ðŸ”¥ Hot reload - error setting property '" + property + "' of '" + c.name + "'", err);
                        }
                    }
                    //@ts-ignore
                    // Gets properties of prototype, including functions of class
                    properties = Object.getOwnPropertyNames(c.prototype);
                    for (let property of properties) {
                        if (property == 'prototype' || property == 'name' || property == 'length')
                            continue;
                        delete c[property];
                        try {
                            //@ts-ignore
                            c.prototype[property] = element.prototype[property];
                            //@ts-ignore
                        }
                        catch (err) {
                            console.error("ðŸ”¥ Hot reload - error setting property '" + property + "' of '" + c.name + "'", err);
                        }
                    }
                }
            }
        });
    }
    // Change the url of the stylesheet to force a reload
    static reloadCss(file) {
        for (let styleSheet of HotModuleReplacment.queryStyleSheets()) {
            if (styleSheet.includes(file.split("?")[0])) {
                // attribute href in Link-Element does not contain Base-Uri
                let link = document.querySelectorAll(`link[href*="/${file}"]`)[0];
                if (link) {
                    link.href = link.href.split("?")[0] + "?reload=" + new Date().getTime();
                }
            }
        }
    }
    static queryStyleSheets() {
        let list = document.querySelectorAll("link[rel=stylesheet]");
        let styleSheets = [];
        for (let element of list) {
            styleSheets.push(element.href);
        }
        return styleSheets;
    }
}
