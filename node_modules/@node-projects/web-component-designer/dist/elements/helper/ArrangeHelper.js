import { Orientation } from '../../enums/Orientation.js';
export class ArrangeHelper {
    static arrangeElements(orientation, designerCanvas) {
        switch (orientation) {
            case Orientation.TOP: {
                const grp = this.formGroup(ArrangeDirection.TOP, designerCanvas);
                const top = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('top');
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'top', top);
                }
                grp.commit();
                break;
            }
            case Orientation.RIGHT: {
                const grp = this.formGroup(ArrangeDirection.RIGHT, designerCanvas);
                const arrElement = designerCanvas.getNormalizedElementCoordinates(designerCanvas.instanceServiceContainer.selectionService.primarySelection.element);
                const right = Math.floor(arrElement.x + arrElement.width);
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'left', (right - Math.floor(designerCanvas.getNormalizedElementCoordinates(elem.element).width)) + "px");
                }
                grp.commit();
                break;
            }
            case Orientation.BOTTOM:
                const grp = this.formGroup(ArrangeDirection.BOTTOM, designerCanvas);
                const arrElement = designerCanvas.getNormalizedElementCoordinates(designerCanvas.instanceServiceContainer.selectionService.primarySelection.element);
                const top = Math.floor(arrElement.y + arrElement.height);
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'top', (top - Math.floor(designerCanvas.getNormalizedElementCoordinates(elem.element).height)) + "px");
                }
                grp.commit();
                break;
            case Orientation.LEFT: {
                const grp = this.formGroup(ArrangeDirection.LEFT, designerCanvas);
                const left = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('left');
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'left', left);
                }
                grp.commit();
                break;
            }
            case Orientation.VERTICAL_CENTER: {
                const grp = this.formGroup(ArrangeDirection.VERTICAL_CENTER, designerCanvas);
                const arrElement = designerCanvas.getNormalizedElementCoordinates(designerCanvas.instanceServiceContainer.selectionService.primarySelection.element);
                const ver_center = arrElement.y + arrElement.height / 2;
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'top', (ver_center - Math.floor(designerCanvas.getNormalizedElementCoordinates(elem.element).height) / 2) + "px");
                }
                grp.commit();
                break;
            }
            case Orientation.HORIZONTAL_CENTER: {
                const grp = this.formGroup(ArrangeDirection.HORIZONTAL_CENTER, designerCanvas);
                const arrElement = designerCanvas.getNormalizedElementCoordinates(designerCanvas.instanceServiceContainer.selectionService.primarySelection.element);
                const hor_center = arrElement.x + (arrElement.width / 2);
                for (let elem of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                    this.arrange(elem, 'left', (hor_center - Math.floor(designerCanvas.getNormalizedElementCoordinates(elem.element).width) / 2) + "px");
                }
                grp.commit();
                break;
            }
        }
    }
    static arrange(element, attribut, value) {
        element.setStyle(attribut, value);
    }
    static formGroup(name, designerCanvas) {
        return designerCanvas.instanceServiceContainer.selectionService.primarySelection.openGroup(name);
    }
}
var ArrangeDirection;
(function (ArrangeDirection) {
    ArrangeDirection["TOP"] = "arrangeTop";
    ArrangeDirection["RIGHT"] = "arrangeRight";
    ArrangeDirection["BOTTOM"] = "arrangeBottom";
    ArrangeDirection["LEFT"] = "arrangeLeft";
    ArrangeDirection["HORIZONTAL_CENTER"] = "arrangeHorizontalCenter";
    ArrangeDirection["VERTICAL_CENTER"] = "arrangeVerticalCenter";
})(ArrangeDirection || (ArrangeDirection = {}));
