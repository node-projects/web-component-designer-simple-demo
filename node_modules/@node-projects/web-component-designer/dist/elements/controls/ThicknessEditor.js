import { BaseCustomWebComponentConstructorAppend, css, html, TypedEvent } from '@node-projects/base-custom-webcomponent';
export class ThicknessEditor extends BaseCustomWebComponentConstructorAppend {
    static style = css `
  :host {
    margin: 4px;
    margin-left: auto;
    margin-right: auto;
  }
  #container {
    display: grid;
    grid-template-columns: minmax(30px, 40px) minmax(30px, 60px) minmax(30px, 40px);
    grid-template-rows: auto;
    grid-template-areas: 
          "  .   top     ."
          "left middle right"
          "  .  bottom   .";
    column-gap: 2px;
    row-gap: 2px;
  }
  input {
    width: 20px;
    text-align: center;
    font-size: 10px;
    height: 20px;
    padding: 0;
  }
  #left {
    grid-area: left;
    justify-self: end;
  }
  #top {
    grid-area: top;
    align-self: end;
    justify-self: center;
  }
  #right {
    grid-area: right;
    justify-self: start;
  }
  #bottom {
    grid-area: bottom;
    align-self: start;
    justify-self: center;
  }
  #rect {
    grid-area: middle;
    border: 1px solid black;
    background: lightgray;
  }
  `;
    static template = html `
    <div id="container">
      <input id="left">
      <input id="top">
      <input id="right">
      <input id="bottom">
      <div id="rect"></div>
    </div>
  `;
    _leftInput;
    _topInput;
    _rightInput;
    _bottomInput;
    _valueLeft;
    get valueLeft() {
        return this._valueLeft;
    }
    set valueLeft(value) {
        const oldValue = this._valueLeft;
        this._valueLeft = value;
        if (oldValue !== value) {
            this._updateValue();
            this.valueLeftChanged.emit({ newValue: value, oldValue: oldValue });
        }
    }
    valueLeftChanged = new TypedEvent();
    _valueTop;
    get valueTop() {
        return this._valueTop;
    }
    set valueTop(value) {
        const oldValue = this._valueTop;
        this._valueTop = value;
        if (oldValue !== value) {
            this._updateValue();
            this.valueTopChanged.emit({ newValue: value, oldValue: oldValue });
        }
    }
    valueTopChanged = new TypedEvent();
    _valueRight;
    get valueRight() {
        return this._valueRight;
    }
    set valueRight(value) {
        const oldValue = this._valueRight;
        this._valueRight = value;
        if (oldValue !== value) {
            this._updateValue();
            this.valueRightChanged.emit({ newValue: value, oldValue: oldValue });
        }
    }
    valueRightChanged = new TypedEvent();
    _valueBottom;
    get valueBottom() {
        return this._valueBottom;
    }
    set valueBottom(value) {
        const oldValue = this._valueBottom;
        this._valueBottom = value;
        if (oldValue !== value) {
            this._updateValue();
            this.valueBottomChanged.emit({ newValue: value, oldValue: oldValue });
        }
    }
    valueBottomChanged = new TypedEvent();
    property;
    unsetValue;
    _updateValue() {
        this._leftInput.value = this.valueLeft;
        this._topInput.value = this.valueTop;
        this._rightInput.value = this.valueRight;
        this._bottomInput.value = this._valueBottom;
    }
    ready() {
        this._parseAttributesToProperties();
        this._leftInput = this._getDomElement('left');
        this._topInput = this._getDomElement('top');
        this._rightInput = this._getDomElement('right');
        this._bottomInput = this._getDomElement('bottom');
        this._leftInput.onkeyup = (e) => { if (e.key === 'Enter')
            this._valueLeft = this._leftInput.value; };
        this._topInput.onkeyup = (e) => { if (e.key === 'Enter')
            this._valueTop = this._topInput.value; };
        this._rightInput.onkeyup = (e) => { if (e.key === 'Enter')
            this._valueRight = this._rightInput.value; };
        this._bottomInput.onkeyup = (e) => { if (e.key === 'Enter')
            this._valueBottom = this._bottomInput.value; };
        this._leftInput.onblur = (e) => this._valueLeft = this._leftInput.value;
        this._topInput.onblur = (e) => this._valueTop = this._topInput.value;
        this._rightInput.onblur = (e) => this._valueRight = this._rightInput.value;
        this._bottomInput.onblur = (e) => this._valueBottom = this._bottomInput.value;
        this._updateValue();
    }
}
customElements.define('node-projects-thickness-editor', ThicknessEditor);
