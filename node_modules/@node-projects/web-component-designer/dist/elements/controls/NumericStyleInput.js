import { BaseCustomWebComponentConstructorAppend, css, html, TypedEvent } from '@node-projects/base-custom-webcomponent';
export class NumericStyleInput extends BaseCustomWebComponentConstructorAppend {
    static style = css `
    :host {
    }

    input {
      cursor: ew-resize;
    }
  `;
    static template = html `
    <input id="input" type="text">
    <select id="select">
      <option>px</option>
      <option>%</option>
      <option>pt</option>
    </select>
  `;
    _value;
    get value() {
        return this._value;
    }
    set value(value) {
        const oldValue = this._value;
        this._value = value;
        this._updateValue();
        this.valueChanged.emit({ newValue: this._value, oldValue: oldValue });
    }
    valueChanged = new TypedEvent();
    _input;
    //private _select: HTMLSelectElement;
    constructor() {
        super();
        this._input = this._getDomElement('input');
        //this._select = this._getDomElement<HTMLSelectElement>('select');
        let oldX = null;
        this._input.onpointerdown = (e) => {
            oldX = e.x;
            this._input.setPointerCapture(e.pointerId);
        };
        this._input.onpointermove = (e) => {
            if (oldX !== null) {
                let diffX = e.x - oldX;
                if (diffX != 0)
                    this._input.value = parseInt(this._input.value) + diffX;
            }
        };
        this._input.onpointerup = (e) => {
            oldX = null;
            this._input.releasePointerCapture(e.pointerId);
        };
    }
    _updateValue() {
    }
}
customElements.define('node-projects-numeric-style-input', NumericStyleInput);
