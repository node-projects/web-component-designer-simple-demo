export class FlexBoxPlacementService {
    enterContainer(container, items) {
        for (let i of items) {
            i.removeStyle("position");
            i.removeStyle("left");
            i.removeStyle("top");
            i.removeStyle("right");
            i.removeStyle("transform");
        }
    }
    leaveContainer(container, items) {
    }
    serviceForContainer(container, containerStyle) {
        if (containerStyle.display == 'flex' || containerStyle.display == 'inline-flex')
            return true;
        return false;
    }
    canEnter(container, items) {
        return true;
    }
    canLeave(container, items) {
        return true;
    }
    getElementOffset(container, designItem) {
        return container.element.getBoundingClientRect();
    }
    placePoint(event, placementView, container, startPoint, offsetInControl, newPoint, items) {
        return null;
    }
    place(event, placementView, container, startPoint, offsetInControl, newPoint, items) {
        /*let direction = getComputedStyle(container.element).flexDirection;
        
        const pos = (<IDesignerCanvas><unknown>placementView).getNormalizedEventCoordinates(event);
        const posElement = (<IDesignerCanvas><unknown>placementView).getNormalizedElementCoordinates(items[0].element)
    
        for (let e of container.element.children) {
    
        }*/
    }
    finishPlace(event, placementView, container, startPoint, offsetInControl, newPoint, items) {
    }
}
