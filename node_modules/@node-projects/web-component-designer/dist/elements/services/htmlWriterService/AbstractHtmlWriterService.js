import { DomConverter } from '../../widgets/designerView/DomConverter.js';
import { CssCombiner } from '../../helper/CssCombiner.js';
import { PropertiesHelper } from '../propertiesService/services/PropertiesHelper.js';
export class AbstractHtmlWriterService {
    options;
    constructor(options) {
        this.options = options ?? {};
        this.options.beautifyOutput ??= true;
        this.options.compressCssToShorthandProperties ??= true;
        this.options.writeDesignerProperties ??= true;
        this.options.parseJsonInAttributes ??= true;
        this.options.jsonWriteMode ??= 'min';
    }
    writeAttributes(indentedTextWriter, designItem) {
        if (designItem.hasAttributes) {
            for (const a of designItem.attributes()) {
                indentedTextWriter.write(' ');
                if (typeof a[1] === 'string') {
                    if (a[1] === "")
                        indentedTextWriter.write(a[0]);
                    else {
                        if (this.options.parseJsonInAttributes &&
                            ((a[1].startsWith('{') && !a[1].startsWith('{{') && a[1].endsWith('}')) ||
                                (a[1].startsWith('[') && !a[1].startsWith('[[') && a[1].endsWith(']')))) {
                            try {
                                let j = JSON.parse(a[1]);
                                let txt;
                                if (this.options.jsonWriteMode == 'beauty')
                                    txt = JSON.stringify(j, null, 2);
                                else
                                    txt = JSON.stringify(j);
                                indentedTextWriter.write(a[0] + '=\'' + DomConverter.normalizeAttributeValue(txt, true) + '\'');
                                continue;
                            }
                            catch { }
                        }
                        const content = DomConverter.normalizeAttributeValue(a[1]);
                        if (content.indexOf('&quot;')) {
                            const contentSingle = DomConverter.normalizeAttributeValue(a[1], true);
                            if (contentSingle.length < content.length)
                                indentedTextWriter.write(a[0] + '=\'' + contentSingle + '\'');
                            else
                                indentedTextWriter.write(a[0] + '="' + content + '"');
                        }
                        else
                            indentedTextWriter.write(a[0] + '="' + content + '"');
                    }
                }
                else if (!a[1])
                    indentedTextWriter.write(a[0]);
                else {
                    //TODO: writing of bindings, really ???
                }
            }
        }
    }
    writeStyles(indentedTextWriter, designItem) {
        if (designItem.hasStyles) {
            indentedTextWriter.write(' style="');
            let styles = designItem.styles();
            if (this.options.compressCssToShorthandProperties)
                styles = CssCombiner.combine(new Map(styles));
            for (const s of styles) {
                if (s[0]) {
                    if (s[0].startsWith('--'))
                        indentedTextWriter.write(s[0] + ':' + DomConverter.normalizeAttributeValue(s[1]) + ';');
                    else
                        indentedTextWriter.write(PropertiesHelper.camelToDashCase(s[0]) + ':' + DomConverter.normalizeAttributeValue(s[1]) + ';');
                }
            }
            indentedTextWriter.write('"');
        }
    }
}
