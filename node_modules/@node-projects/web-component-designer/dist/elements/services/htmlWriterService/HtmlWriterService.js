import { DomConverter } from "../../widgets/designerView/DomConverter.js";
import { CssCombiner } from "../../helper/CssCombiner.js";
import { NodeType } from "../../item/NodeType.js";
import { PropertiesHelper } from "../propertiesService/services/PropertiesHelper.js";
export class HtmlWriterService {
  canWrite(designItem) {
    return true;
  }

  write(indentedTextWriter, designItem, options, designItemsAssignmentList) {
    let start = indentedTextWriter.position;

    if (designItem.nodeType == NodeType.TextNode) {
      this.writeTextNode(indentedTextWriter, designItem, true);
    } else if (designItem.nodeType == NodeType.Comment) {
      indentedTextWriter.writeIndent();
      indentedTextWriter.write('<!--' + designItem.content + '-->');
      indentedTextWriter.writeNewline();
    } else {
      indentedTextWriter.writeIndent();
      indentedTextWriter.write('<' + designItem.name);

      if (designItem.hasAttributes) {
        for (const a of designItem.attributes) {
          indentedTextWriter.write(' ');
          if (typeof a[1] === 'string') indentedTextWriter.write(a[0] + '="' + DomConverter.normalizeAttributeValue(a[1]) + '"');else if (!a[1]) indentedTextWriter.write(a[0]);else {//TODO: writing of bindings
          }
        }
      }

      if (designItem.hasStyles) {
        indentedTextWriter.write(' style="');
        let styles = designItem.styles;
        if (options.compressCssToShorthandProperties) styles = CssCombiner.combine(styles);

        for (const s of styles) {
          if (s[0]) {
            if (typeof s[1] === 'string') {
              indentedTextWriter.write(PropertiesHelper.camelToDashCase(s[0]) + ':' + DomConverter.normalizeAttributeValue(s[1]) + ';');
            } else {//TODO: writing of bindings
            }
          }
        }

        indentedTextWriter.write('"');
      }

      indentedTextWriter.write('>');

      if (designItem.hasChildren) {
        const children = designItem.children();
        const singleTextNode = designItem.childCount === 1 && designItem.firstChild.nodeType === NodeType.TextNode;

        if (singleTextNode) {
          this.writeTextNode(indentedTextWriter, designItem, false);
        } else {
          indentedTextWriter.writeNewline();
          indentedTextWriter.levelRaise();

          for (const c of children) {
            c.serviceContainer.forSomeServicesTillResult('htmlWriterService', s => {
              if (s.canWrite(c)) {
                s.write(indentedTextWriter, c, options, designItemsAssignmentList);
              }
            });
          }

          indentedTextWriter.levelShrink();
          indentedTextWriter.writeIndent();
        }
      } else if (designItem.hasContent) {
        indentedTextWriter.write(DomConverter.normalizeContentValue(designItem.content));
      }

      if (!DomConverter.IsSelfClosingElement(designItem.name)) indentedTextWriter.write('</' + designItem.name + '>');
      indentedTextWriter.writeNewline();
    }

    if (designItemsAssignmentList) {
      designItemsAssignmentList.set(designItem, {
        start: start,
        length: indentedTextWriter.position - start - 1
      });
    }
  }

  writeTextNode(indentedTextWriter, designItem, indentAndNewline) {
    let content = DomConverter.normalizeContentValue(designItem.content).trim();

    if (content) {
      if (indentAndNewline) indentedTextWriter.writeIndent();
      indentedTextWriter.write(content);
      if (indentAndNewline) indentedTextWriter.writeNewline();
    }
  }

}