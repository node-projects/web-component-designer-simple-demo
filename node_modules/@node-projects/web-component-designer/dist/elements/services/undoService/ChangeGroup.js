export class ChangeGroup {
    constructor(title, affectedItems, commitHandler, abortHandler) {
        this.undoStack = [];
        this.redoStack = [];
        this.title = title;
        this.affectedItems = affectedItems;
        this.commitHandler = commitHandler;
        this.abortHandler = abortHandler;
    }
    do() {
        let item = null;
        while (item = this.redoStack.pop()) {
            try {
                item.do();
                this.undoStack.push(item);
            }
            catch (err) {
                throw err;
            }
        }
    }
    undo() {
        let item = null;
        while (item = this.undoStack.pop()) {
            try {
                item.undo();
                this.redoStack.push(item);
            }
            catch (err) {
                throw err;
            }
        }
    }
    ;
    commit() {
        this.commitHandler(this);
    }
    abort() {
        this.abortHandler(this);
    }
    mergeWith(other) {
        return false;
    }
    execute(item) {
        item.do();
        for (let existingItem of this.undoStack) {
            if (existingItem.mergeWith(item))
                return;
        }
        this.undoStack.push(item);
    }
}
