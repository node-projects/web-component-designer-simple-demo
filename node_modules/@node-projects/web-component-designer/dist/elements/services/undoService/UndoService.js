import { ChangeGroup } from "./ChangeGroup.js";
/*
 * Manages a stack of available undo/redo actions
 */
export class UndoService {
    _undoStack = [];
    _redoStack = [];
    _transactionStack = [];
    _designerCanvas;
    constructor(designerCanvas) {
        this._designerCanvas = designerCanvas;
    }
    openGroup(title) {
        let t = new ChangeGroup(title, (t) => this.commitTransactionItem(t), (t) => this.abortTransactionItem(t));
        this._transactionStack.push(t);
        return t;
    }
    commitTransactionItem(transactionItem) {
        let itm = this._transactionStack.pop();
        if (itm !== transactionItem) {
            this.clear();
            throw "UndoService - Commited Transaction was not the last";
        }
        if (itm.undoStack.length) {
            if (this._transactionStack.length > 0) {
                this._transactionStack[this._transactionStack.length - 1].addCommitedSubchangeGroup(itm);
            }
            else {
                this._undoStack.push(itm);
                this._redoStack = [];
            }
        }
        if (this._transactionStack.length == 0) {
            this._designerCanvas.extensionManager.refreshAllExtensions(transactionItem.affectedItems);
            this._designerCanvas.onContentChanged.emit();
        }
    }
    abortTransactionItem(transactionItem) {
        let itm = this._transactionStack.pop();
        if (itm !== transactionItem) {
            this.clear();
            throw "UndoService - Aborted Transaction was not the last";
        }
        itm.undo();
    }
    execute(item) {
        if (this._transactionStack.length == 0) {
            item.do();
            this._undoStack.push(item);
            this._redoStack = [];
        }
        else {
            this._transactionStack[this._transactionStack.length - 1].execute(item);
        }
        if (this._transactionStack.length == 0) {
            this._designerCanvas.extensionManager.refreshAllExtensions(item.affectedItems);
            this._designerCanvas.onContentChanged.emit();
        }
    }
    clear() {
        this._undoStack = [];
        this._redoStack = [];
        this._transactionStack = [];
    }
    undo() {
        if (!this.canUndo())
            return;
        if (this._transactionStack.length != 0)
            throw "Cannot Undo while transaction is running";
        let item = this._undoStack.pop();
        try {
            item.undo();
            this._redoStack.push(item);
        }
        catch (err) {
            this.clear();
            throw err;
        }
        this._designerCanvas.extensionManager.refreshAllExtensions(item.affectedItems);
        this._designerCanvas.onContentChanged.emit();
    }
    redo() {
        if (!this.canRedo())
            return;
        if (this._transactionStack.length != 0)
            throw "Cannot Redo while transaction is running";
        let item = this._redoStack.pop();
        try {
            item.do();
            this._undoStack.push(item);
        }
        catch (err) {
            this.clear();
            throw err;
        }
        this._designerCanvas.extensionManager.refreshAllExtensions(item.affectedItems);
        this._designerCanvas.onContentChanged.emit();
    }
    canUndo() {
        return this._undoStack.length > 0;
    }
    canRedo() {
        return this._redoStack.length > 0;
    }
    *getUndoEntries(count = 999) {
        for (let i = Math.min(this._undoStack.length, count) - 1; i >= 0; i--)
            yield this._undoStack[i].title;
    }
    *getRedoEntries(count = 999) {
        for (let i = Math.min(this._redoStack.length, count) - 1; i >= 0; i--)
            yield this._redoStack[i].title;
    }
}
