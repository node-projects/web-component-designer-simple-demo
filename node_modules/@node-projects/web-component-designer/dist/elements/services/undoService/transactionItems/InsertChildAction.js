export class InsertChildAction {
    constructor(designItem, newParent, newIndex) {
        this.title = "Move or Insert Item";
        this.designItem = designItem;
        this.newParent = newParent;
        this.newIndex = newIndex;
    }
    title;
    get affectedItems() {
        if (this.oldParent)
            return [this.designItem, this.newParent, this.oldParent];
        return [this.designItem, this.newParent];
    }
    undo() {
        if (this.oldParent) {
            this.oldParent._insertChildInternal(this.designItem, this.oldIndex);
            this.affectedItems[0].instanceServiceContainer.contentService.onContentChanged.emit({ changeType: 'moved', designItems: [this.designItem] });
        }
        else {
            this.designItem.parent._removeChildInternal(this.designItem);
            this.affectedItems[0].instanceServiceContainer.contentService.onContentChanged.emit({ changeType: 'removed', designItems: [this.designItem] });
        }
    }
    do() {
        this.oldParent = this.designItem.parent;
        if (this.oldParent)
            this.oldIndex = this.designItem.parent.indexOf(this.designItem);
        this.newParent._insertChildInternal(this.designItem, this.newIndex);
        this.affectedItems[0].instanceServiceContainer.contentService.onContentChanged.emit({ changeType: this.oldParent ? 'moved' : 'added', designItems: [this.designItem] });
    }
    designItem;
    newParent;
    newIndex;
    oldParent;
    oldIndex;
    newItem;
    mergeWith(other) {
        return false;
    }
}
