import { CommandType } from "../../../commandHandling/CommandType.js";
import { DesignItem } from "../../item/DesignItem.js";
import { MoveElementInDomAction } from "../undoService/transactionItems/MoveElementInDomAction.js";
export class DefaultModelCommandService {
    canExecuteCommand(designerCanvas, command) {
        if (command.type == CommandType.moveBackward ||
            command.type == CommandType.moveForward ||
            command.type == CommandType.moveToBack ||
            command.type == CommandType.moveToFront)
            return designerCanvas.instanceServiceContainer.selectionService.primarySelection != null;
        if (command.type == CommandType.arrangeBottom ||
            command.type == CommandType.arrangeCenter ||
            command.type == CommandType.arrangeLeft ||
            command.type == CommandType.arrangeMiddle ||
            command.type == CommandType.arrangeRight ||
            command.type == CommandType.arrangeTop ||
            command.type == CommandType.unifyHeight ||
            command.type == CommandType.unifyWidth)
            return designerCanvas.instanceServiceContainer.selectionService.selectedElements.length > 1;
        return null;
    }
    async executeCommand(designerCanvas, command) {
        let sel = designerCanvas.instanceServiceContainer.selectionService.primarySelection;
        if (command.type == CommandType.moveBackward)
            designerCanvas.instanceServiceContainer.undoService.execute(new MoveElementInDomAction(sel, DesignItem.GetDesignItem(sel.element.previousElementSibling), 'beforebegin', DesignItem.GetDesignItem(sel.element.previousElementSibling), 'afterend'));
        else if (command.type == CommandType.moveForward)
            designerCanvas.instanceServiceContainer.undoService.execute(new MoveElementInDomAction(sel, DesignItem.GetDesignItem(sel.element.nextElementSibling), 'afterend', DesignItem.GetDesignItem(sel.element.nextElementSibling), 'beforebegin'));
        else if (command.type == CommandType.moveToBack)
            designerCanvas.instanceServiceContainer.undoService.execute(new MoveElementInDomAction(sel, DesignItem.GetDesignItem(sel.element.parentElement), 'afterbegin', DesignItem.GetDesignItem(sel.element.previousElementSibling), 'afterend'));
        else if (command.type == CommandType.moveToFront)
            designerCanvas.instanceServiceContainer.undoService.execute(new MoveElementInDomAction(sel, DesignItem.GetDesignItem(sel.element.parentElement), 'beforeend', DesignItem.GetDesignItem(sel.element.nextElementSibling), 'beforebegin'));
        else if (command.type == CommandType.arrangeLeft) {
            const grp = designerCanvas.instanceServiceContainer.selectionService.primarySelection.openGroup('arrangeLeft');
            const left = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('left');
            for (let s of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                s.setStyle('left', left);
            }
            grp.commit();
        }
        else if (command.type == CommandType.arrangeTop) {
            const grp = designerCanvas.instanceServiceContainer.selectionService.primarySelection.openGroup('arrangeTop');
            const top = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('top');
            for (let s of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                s.setStyle('top', top);
            }
            grp.commit();
        }
        else if (command.type == CommandType.unifyHeight) {
            const grp = designerCanvas.instanceServiceContainer.selectionService.primarySelection.openGroup('unifyHeight');
            const height = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('height');
            for (let s of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                s.setStyle('height', height);
            }
            grp.commit();
        }
        else if (command.type == CommandType.unifyWidth) {
            const grp = designerCanvas.instanceServiceContainer.selectionService.primarySelection.openGroup('unifyWidth');
            const width = designerCanvas.instanceServiceContainer.selectionService.primarySelection.styles.get('width');
            for (let s of designerCanvas.instanceServiceContainer.selectionService.selectedElements) {
                s.setStyle('width', width);
            }
            grp.commit();
        }
        else
            return null;
        return true;
    }
}
