import { DomHelper, cssFromString } from "@node-projects/base-custom-webcomponent";
export class SimpleDemoProviderService {
    async provideDemo(container, serviceContainer, instanceServiceContainer, code) {
        const contentDiv = document.createElement('div');
        let shadowRoot = contentDiv.attachShadow({ mode: 'open' });
        contentDiv.style.width = '100%';
        contentDiv.style.height = '100%';
        contentDiv.style.border = 'none';
        contentDiv.style.display = 'none';
        contentDiv.style.overflow = 'auto';
        contentDiv.style.position = 'absolute';
        container.style.position = 'relative';
        DomHelper.removeAllChildnodes(container);
        container.appendChild(contentDiv);
        let styles = [];
        if (instanceServiceContainer.designerCanvas.additionalStyles)
            styles.push(...instanceServiceContainer.designerCanvas.additionalStyles);
        if (instanceServiceContainer.stylesheetService) {
            styles.push(...instanceServiceContainer.stylesheetService
                .getStylesheets()
                .map(x => cssFromString(x.content)));
        }
        shadowRoot.adoptedStyleSheets = styles;
        shadowRoot.innerHTML = '';
        //@ts-ignore
        const myDocument = new DOMParser().parseFromString(code, 'text/html', { includeShadowRoots: true });
        const fragment = document.createDocumentFragment();
        for (let e of myDocument.childNodes)
            fragment.appendChild(e);
        shadowRoot.appendChild(fragment);
        contentDiv.style.display = '';
    }
}
