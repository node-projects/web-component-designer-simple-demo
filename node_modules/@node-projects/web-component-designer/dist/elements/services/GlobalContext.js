//Service container should not be something with changeing information, so global context is for tool and color (and maybe more)
import { PropertyChangedArgs, TypedEvent } from "@node-projects/base-custom-webcomponent";
export class GlobalContext {
    _serviceContainer;
    _tool;
    _strokeColor = 'black';
    _strokeThickness = '3';
    _fillBrush = 'transparent';
    constructor(serviceContainer) {
        this._serviceContainer = serviceContainer;
    }
    set tool(tool) {
        if (this._tool !== tool) {
            const oldTool = this._tool;
            if (oldTool) {
                oldTool.dispose();
            }
            this._tool = tool;
            let toolName = null;
            for (let t of this._serviceContainer.designerTools) {
                if (t[1] == tool)
                    toolName = t[0];
            }
            this.onToolChanged.emit(new PropertyChangedArgs({ name: toolName, tool: tool }, { name: null, tool: oldTool }));
            if (this._tool)
                this._tool.activated(this._serviceContainer);
        }
    }
    get tool() {
        return this._tool;
    }
    onToolChanged = new TypedEvent();
    finishedWithTool = () => this.tool = null;
    set strokeColor(strokeColor) {
        if (this._strokeColor !== strokeColor) {
            const oldStrokeColor = this._strokeColor;
            this._strokeColor = strokeColor;
            this.onStrokeColorChanged.emit(new PropertyChangedArgs(strokeColor, oldStrokeColor));
        }
    }
    get strokeColor() {
        return this._strokeColor;
    }
    onStrokeColorChanged = new TypedEvent();
    set strokeThickness(strokeThickness) {
        if (this._strokeThickness !== strokeThickness) {
            const oldStrokeThickness = this._strokeThickness;
            this._strokeThickness = strokeThickness;
            this.onStrokeThicknessChanged.emit(new PropertyChangedArgs(strokeThickness, oldStrokeThickness));
        }
    }
    get strokeThickness() {
        return this._strokeThickness;
    }
    onStrokeThicknessChanged = new TypedEvent();
    set fillBrush(fillBrush) {
        this._fillBrush = fillBrush;
        if (this._fillBrush !== fillBrush) {
            const oldFillBrush = this._fillBrush;
            this._fillBrush = fillBrush;
            this.onFillBrushChanged.emit(new PropertyChangedArgs(fillBrush, oldFillBrush));
        }
    }
    get fillBrush() {
        return this._fillBrush;
    }
    onFillBrushChanged = new TypedEvent();
}
