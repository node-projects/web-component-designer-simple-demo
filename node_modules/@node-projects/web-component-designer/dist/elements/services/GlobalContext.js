//TODO: global conext not yet used.
//Service container should not be something with changeing information, so global context is for tool and color (and maybe more)
import { PropertyChangedArgs, TypedEvent } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
export class GlobalContext {
    constructor(serviceContainer) {
        this._strokeColor = 'black';
        this._fillBrush = 'transparent';
        this.onToolChanged = new TypedEvent();
        this.finishedWithTool = () => this.tool = null;
        this.onStrokeColorChanged = new TypedEvent();
        this.onFillBrushChanged = new TypedEvent();
        this._serviceContainer = serviceContainer;
    }
    set tool(tool) {
        if (this._tool !== tool) {
            const oldTool = this._tool;
            if (oldTool)
                oldTool.dispose();
            this._tool = tool;
            this.onToolChanged.emit(new PropertyChangedArgs(tool, oldTool));
            if (this._tool)
                this._tool.activated(this._serviceContainer);
        }
    }
    get tool() {
        return this._tool;
    }
    set strokeColor(strokeColor) {
        if (this._strokeColor !== strokeColor) {
            const oldStrokeColor = this._strokeColor;
            this._strokeColor = strokeColor;
            this.onStrokeColorChanged.emit(new PropertyChangedArgs(strokeColor, oldStrokeColor));
        }
    }
    get strokeColor() {
        return this._strokeColor;
    }
    set fillBrush(fillBrush) {
        this._fillBrush = fillBrush;
        if (this._fillBrush !== fillBrush) {
            const oldFillBrush = this._fillBrush;
            this._fillBrush = fillBrush;
            this.onFillBrushChanged.emit(new PropertyChangedArgs(fillBrush, oldFillBrush));
        }
    }
    get fillBrush() {
        return this._fillBrush;
    }
}
