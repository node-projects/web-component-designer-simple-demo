import { TypedEvent } from '@node-projects/base-custom-webcomponent';
export class BaseServiceContainer {
    _services = new Map();
    servicesChanged = new TypedEvent();
    getLastService(service) {
        let list = this._services.get(service);
        if (list && list.length)
            return list[list.length - 1];
        return null;
    }
    getServices(service) {
        return this._services.get(service);
    }
    register(name, service) {
        if (!this._services.has(name))
            this._services.set(name, []);
        this._services.get(name).push(service);
        this.servicesChanged.emit({ serviceName: name });
    }
    registerMultiple(names, service) {
        for (const name of names) {
            if (!this._services.has(name))
                this._services.set(name, []);
            this._services.get(name).push(service);
            this.servicesChanged.emit({ serviceName: name });
        }
    }
    forSomeServicesTillResult(service, callback) {
        let services = this.getServices(service);
        if (services == null) {
            return null;
        }
        for (let index = services.length - 1; index >= 0; index--) {
            const currentService = services[index];
            let result = callback(currentService);
            if (result != null)
                return result;
        }
        return null;
    }
    getLastServiceWhere(service, callback) {
        let services = this.getServices(service);
        if (services == null) {
            return null;
        }
        for (let index = services.length - 1; index >= 0; index--) {
            const currentService = services[index];
            let result = callback(currentService);
            if (result)
                return currentService;
        }
        return null;
    }
}
