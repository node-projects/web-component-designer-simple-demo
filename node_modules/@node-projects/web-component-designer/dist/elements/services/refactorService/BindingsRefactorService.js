export class BindingsRefactorService {
    getRefactorings(designItems) {
        let refactorings = [];
        for (let d of designItems) {
            let bindings = d.serviceContainer.bindingService.getBindings(d);
            if (bindings) {
                for (let b of bindings) {
                    for (let s of b.bindableObjectNames) {
                        refactorings.push({ service: this, name: s, itemType: 'bindableObject', designItem: d, type: 'binding', sourceObject: b, display: b.target + '/' + b.targetName });
                    }
                }
            }
        }
        return refactorings;
    }
    refactor(refactoring, oldValue, newValue) {
        let binding = refactoring.sourceObject;
        binding.bindableObjectNames = binding.bindableObjectNames.map(x => x == oldValue ? newValue : x);
        refactoring.designItem.serviceContainer.bindingService.setBinding(refactoring.designItem, binding);
    }
}
