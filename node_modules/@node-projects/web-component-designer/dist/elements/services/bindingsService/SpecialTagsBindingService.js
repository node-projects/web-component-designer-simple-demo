import { BindingTarget } from "../../item/BindingTarget.js";
import { BindingMode } from "../../item/BindingMode.js";
/* Service wich read binings from special HTMl elements -> like tag-binding */
//TODO: refactor so we could use it
export class SpecialTagsBindingService {
    static type = 'visu-tagbinding-binding';
    _bindingTagName = "visu-tagbinding";
    _elementIdAttribute = "elemnt-id";
    _propertyNameAttribute = "property";
    _isStyleNameAttribute = "is-style";
    constructor() {
    }
    getBindings(designItem) {
        const bindings = [];
        const directBindings = designItem.element.querySelectorAll(':scope > ' + this._bindingTagName);
        for (let b of directBindings) {
            bindings.push(this._parseBindingElement(b));
        }
        if (designItem.id) {
            const nameBindings = designItem.instanceServiceContainer.contentService.rootDesignItem.element.querySelectorAll(this._bindingTagName + "[" + this._elementIdAttribute + "='" + designItem.id + "]");
            for (let b of nameBindings) {
                const bnd = this._parseBindingElement(b);
                bnd.targetId = designItem.id;
                bindings.push(bnd);
            }
        }
        return null;
    }
    _parseBindingElement(b) {
        let bnd = { targetName: b.getAttribute(this._propertyNameAttribute) };
        bnd.target = b.hasAttribute(this._isStyleNameAttribute) ? BindingTarget.css : BindingTarget.property;
        bnd.invert = b.hasAttribute('negative-logic');
        bnd.rawValue = b.outerHTML;
        bnd.type = SpecialTagsBindingService.type;
        bnd.mode = b.hasAttribute('two-way') ? BindingMode.twoWay : BindingMode.oneWay;
        return bnd;
    }
    setBinding(designItem, binding) {
        return true;
    }
    clearBinding(designItem, propertyName, propertyTarget) {
        return true;
    }
}
