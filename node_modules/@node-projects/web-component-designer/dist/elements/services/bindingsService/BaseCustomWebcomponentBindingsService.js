import { BindingMode } from '../../item/BindingMode.js';
import { BindingTarget } from "../../item/BindingTarget.js";
import { PropertiesHelper } from '../propertiesService/services/PropertiesHelper.js';
export class BaseCustomWebcomponentBindingsService {
    static type = 'base-custom-webcomponent-binding';
    getBindings(designItem) {
        let bindings = null;
        for (let a of designItem.attributes()) {
            const name = a[0];
            const value = a[1];
            if ((value.startsWith('[[') || value.startsWith('{{')) && (value.endsWith('}}') || value.endsWith(']]'))) {
                if (!bindings)
                    bindings = [];
                let bnd = { rawName: name, rawValue: value };
                if (a[0] === 'bcw:visible') {
                    bnd.targetName = 'visibility';
                    bnd.target = BindingTarget.css;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else if (a[0].startsWith('css:')) {
                    bnd.targetName = name.substring(4);
                    bnd.target = BindingTarget.css;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else if (a[0].startsWith('class:')) {
                    bnd.targetName = name.substring(4);
                    bnd.target = BindingTarget.class;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else if (a[0].startsWith('$')) {
                    bnd.targetName = name.substring(1);
                    bnd.target = BindingTarget.attribute;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else if (a[0].startsWith('@')) {
                    bnd.targetName = name.substring(1);
                    bnd.target = BindingTarget.event;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else if (a[0].startsWith('.')) {
                    bnd.targetName = PropertiesHelper.dashToCamelCase(name.substring(1));
                    bnd.target = BindingTarget.explicitProperty;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                else {
                    bnd.targetName = PropertiesHelper.dashToCamelCase(name);
                    bnd.target = BindingTarget.property;
                    bnd.expression = value.substring(2, value.length - 2);
                }
                bnd.type = BaseCustomWebcomponentBindingsService.type;
                bnd.targetName = bnd.targetName;
                bnd.bindableObjectNames = [value.substring(2, value.length - 2)];
                bindings.push(bnd);
            }
        }
        return bindings;
    }
    setBinding(designItem, binding) {
        if (binding.type !== BaseCustomWebcomponentBindingsService.type)
            return false;
        let nm = '';
        switch (binding.target) {
            case BindingTarget.explicitProperty:
                nm += '.';
                break;
            case BindingTarget.css:
                nm += 'css:';
                break;
            case BindingTarget.class:
                nm += 'class';
                break;
            case BindingTarget.attribute:
                nm += '$';
                break;
            case BindingTarget.event:
                nm += '@';
                break;
        }
        nm += binding.targetName;
        let value = (binding.mode == BindingMode.oneWay ? '[[' : '{{') + binding.expression + (binding.mode == BindingMode.oneWay ? ']]' : '}}');
        designItem.setAttribute(nm, value);
        return true;
    }
    clearBinding(designItem, propertyName, propertyTarget) {
        return true;
    }
}
