import { ValueType } from '../ValueType.js';
import { PropertyChangeAction } from '../../undoService/transactionItems/PropertyChangeAction.js';
export class BasePropertyEditor {
    element;
    property;
    designItems;
    disableChangeNotification = false;
    constructor(property) {
        this.property = property;
    }
    _valueChanged(newValue) {
        if (!this.disableChangeNotification) {
            if (this.designItems && this.designItems.length) {
                const cg = this.designItems[0].openGroup("set property: " + this.property.name);
                for (let d of this.designItems) {
                    const oldValue = this.property.service.getValue([d], this.property);
                    const action = new PropertyChangeAction(d, this.property, newValue, oldValue);
                    d.instanceServiceContainer.undoService.execute(action);
                }
                cg.commit();
            }
        }
    }
    designItemsChanged(designItems) {
        this.designItems = designItems;
    }
    refreshValueWithoutNotification(valueType, value) {
        if (valueType == ValueType.none)
            this.element.classList.add('unset-value');
        else
            this.element.classList.remove('unset-value');
        this.disableChangeNotification = true;
        try {
            this.refreshValue(valueType, value);
        }
        catch (err) {
            console.error(err);
        }
        this.disableChangeNotification = false;
    }
}
