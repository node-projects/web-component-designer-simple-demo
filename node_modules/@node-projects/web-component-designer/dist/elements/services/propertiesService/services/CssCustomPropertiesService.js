import { PropertyType } from '../PropertyType.js';
import { RefreshMode } from '../IPropertiesService.js';
import { CommonPropertiesService } from './CommonPropertiesService.js';
import { ValueType } from '../ValueType.js';
import { BindingTarget } from '../../../item/BindingTarget.js';
export class CssCustomPropertiesService extends CommonPropertiesService {
    removeInheritedCustomProperties;
    constructor(removeInheritedCustomProperties = true) {
        super(false);
        this.name = 'customProperties';
        this.removeInheritedCustomProperties = removeInheritedCustomProperties;
    }
    getRefreshMode(designItem) {
        return RefreshMode.fullOnValueChange;
    }
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return { name: name, type: 'string', service: this, propertyType: PropertyType.cssValue };
    }
    getProperties(designItem) {
        if (!designItem?.element?.computedStyleMap)
            return null;
        let rootMap = Array.from(designItem.instanceServiceContainer.designerCanvas.computedStyleMap()).map(x => x[0]).filter(key => key.startsWith("--"));
        let props = Array.from(designItem.element.computedStyleMap()).map(x => x[0]).filter(key => key.startsWith("--"));
        if (this.removeInheritedCustomProperties)
            props = props.filter(x => !rootMap.includes(x));
        let arr = props.map(x => ({
            name: x,
            service: this,
            propertyType: PropertyType.cssValue
        }));
        return arr;
    }
    clearValue(designItems, property, clearType) {
        super.clearValue(designItems, property, clearType);
    }
    getValue(designItems, property) {
        let val = designItems[0].getStyle(property.name);
        if (val)
            return val;
        return getComputedStyle(designItems[0].element).getPropertyValue(property.name);
    }
    getUnsetValue(designItems, property) {
        if (designItems?.[0].element?.computedStyleMap) {
            return designItems[0].element.computedStyleMap().get(property.name)?.[0];
        }
        return null;
    }
    isSet(designItems, property) {
        if (super.isSet(designItems, property) == ValueType.bound)
            return ValueType.bound;
        return designItems[0].hasStyle(property.name) ? ValueType.all : ValueType.none;
    }
    getPropertyTarget(designItem, property) {
        return BindingTarget.cssvar;
    }
}
