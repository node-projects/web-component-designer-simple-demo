import { PropertyType } from '../PropertyType.js';
import { AbstractPropertiesService } from './AbstractPropertiesService.js';
import { RefreshMode } from '../IPropertiesService.js';
import { ValueType } from '../ValueType.js';
import { BindingTarget } from '../../../item/BindingTarget.js';
export class ContentAndIdPropertiesService extends AbstractPropertiesService {
    getRefreshMode(designItem) {
        return RefreshMode.none;
    }
    contentProperty = {
        name: "textContent",
        type: "string",
        service: this,
        propertyType: PropertyType.property
    };
    idProperty = {
        name: "id",
        type: "string",
        service: this,
        propertyType: PropertyType.propertyAndAttribute
    };
    innerHtmlProperty = {
        name: "innerHTML",
        type: "string",
        service: this,
        propertyType: PropertyType.property
    };
    name = "content";
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return name == 'id' ? this.idProperty : this.contentProperty;
    }
    getProperties(designItem) {
        return [this.idProperty, this.contentProperty, this.innerHtmlProperty];
    }
    clearValue(designItems, property, clearType = 'all') {
        if (property.name == this.contentProperty.name || property.name == this.innerHtmlProperty.name) {
            for (let d of designItems) {
                if (clearType != 'binding') {
                    d.clearChildren();
                }
                if (clearType != 'value') {
                    d.serviceContainer.forSomeServicesTillResult('bindingService', (s) => {
                        return s.clearBinding(d, property.name, this.getPropertyTarget(d, property));
                    });
                }
                this._notifyChangedProperty(d, property, undefined);
            }
        }
        else {
            super.clearValue(designItems, property, clearType);
        }
    }
    isSet(designItems, property) {
        if (property.name == this.contentProperty.name || property.name == this.innerHtmlProperty.name) {
            let all = true;
            let some = false;
            if (designItems != null && designItems.length !== 0) {
                designItems.forEach((x) => {
                    let has = false;
                    has = x.element.childNodes.length > 0;
                    all = all && has;
                    some = some || has;
                });
                //TODO: optimize perf, do not call bindings service for each property. 
                const bindings = designItems[0].serviceContainer.forSomeServicesTillResult('bindingService', (s) => {
                    return s.getBindings(designItems[0]);
                });
                if (bindings && bindings.find(x => x.target == BindingTarget.property && x.targetName == property.name))
                    return ValueType.bound;
            }
            return all ? ValueType.all : some ? ValueType.some : ValueType.none;
        }
        return super.isSet(designItems, property);
    }
    getValue(designItems, property) {
        if (property.name == this.contentProperty.name || property.name == this.innerHtmlProperty.name) {
            return designItems[0].element.textContent;
        }
        return super.getValue(designItems, property);
    }
}
