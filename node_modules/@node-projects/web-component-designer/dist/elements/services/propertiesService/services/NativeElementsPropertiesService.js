import { CommonPropertiesService } from "./CommonPropertiesService.js";
export class NativeElementsPropertiesService extends CommonPropertiesService {
  constructor() {
    super(...arguments); //@ts-ignore

    this.inputProperties = [{
      name: "type",
      type: "list",
      values: ["text", "number", "button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "password", "radio", "range", "reset", "search", "submit", "tel", "time", "url", "week"],
      service: this,
      defaultValue: "text"
    }, {
      name: "value",
      type: "string",
      service: this
    }, {
      name: "checked",
      type: "boolean",
      service: this
    }, {
      name: "min",
      type: "number",
      service: this
    }, {
      name: "max",
      type: "number",
      service: this
    }];
    this.buttonProperties = [{
      name: "type",
      type: "list",
      values: ["button", "submit", "reset"],
      service: this,
      defaultValue: "button"
    }, {
      name: "value",
      type: "string",
      service: this
    }, {
      name: "disabled",
      type: "boolean",
      service: this
    }];
    this.anchorProperties = [{
      name: "href",
      type: "string",
      service: this
    }];
    this.divProperties = [{
      name: "title",
      type: "string",
      service: this
    }];
    this.imgProperties = [{
      name: "src",
      type: "string",
      service: this
    }];
    this.iframeProperties = [{
      name: "src",
      type: "string",
      service: this
    }];
    this.name = "native";
  }

  isHandledElement(designItem) {
    switch (designItem.element.localName) {
      case 'input':
      case 'button':
      case 'a':
      case 'div':
      case 'span':
      case 'br':
      case 'img':
      case 'iframe':
        return true;
    }

    return false;
  }

  getProperty(designItem, name) {
    return this.getProperties(designItem)[name];
  }

  getProperties(designItem) {
    if (!this.isHandledElement(designItem)) return null;

    switch (designItem.element.localName) {
      case 'input':
        return this.inputProperties;

      case 'button':
        return this.buttonProperties;

      case 'a':
        return this.anchorProperties;

      case 'div':
        return this.divProperties;

      case 'img':
        return this.imgProperties;

      case 'iframe':
        return this.iframeProperties;
    }

    return null;
  }

}