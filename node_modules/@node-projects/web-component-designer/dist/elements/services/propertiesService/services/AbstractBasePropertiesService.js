import { PropertiesHelper } from "./PropertiesHelper.js";
import { UnkownElementPropertiesService } from "./UnkownElementPropertiesService.js";
export class AbstractBasePropertiesService extends UnkownElementPropertiesService {
  getProperties(designItem) {
    if (!this.isHandledElement(designItem)) return null;
    return this.parseProperties(designItem.element.constructor.properties);
  }

  parseProperties(list) {
    let properties = [];

    for (const name in list) {
      const polymerProperty = list[name];
      let type = polymerProperty;
      if (polymerProperty.type) type = polymerProperty.type;

      if (type === String) {
        let property = {
          name: name,
          type: "string",
          service: this
        };
        properties.push(property);
      } else if (type === Object) {
        let property = {
          name: name,
          type: "object",
          service: this
        };
        properties.push(property);
      } else if (type === Number) {
        let property = {
          name: name,
          type: "number",
          service: this
        };
        properties.push(property);
      } else if (type === Date) {
        let property = {
          name: name,
          type: "date",
          service: this
        };
        properties.push(property);
      } else if (type === Boolean) {
        let property = {
          name: name,
          type: "boolean",
          service: this
        };
        properties.push(property);
      } else if (PropertiesHelper.isTypescriptEnum(type)) {
        let property = {
          name: name,
          type: "enum",
          enumValues: PropertiesHelper.getTypescriptEnumEntries(type),
          service: this
        };
        properties.push(property);
      }
    }

    return properties;
  }

}