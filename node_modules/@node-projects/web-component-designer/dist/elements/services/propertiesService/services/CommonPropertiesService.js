import { ValueType } from "../ValueType.js";
export class CommonPropertiesService {
  constructor() {
    //@ts-ignore
    this.commonProperties = [{
      name: "id",
      type: "string",
      service: this
    }, {
      name: "class",
      type: "string",
      service: this
    }, {
      name: "title",
      type: "string",
      service: this
    }, {
      name: "tabindex",
      type: "number",
      service: this
    }];
    this.name = "common";
  }

  isHandledElement(designItem) {
    return true;
  }

  getProperty(designItem, name) {
    return this.commonProperties[name];
  }

  getProperties(designItem) {
    return this.commonProperties;
  }

  setValue(designItems, property, value) {
    for (let d of designItems) {
      if (property.type == 'boolean' && !value) {
        d.attributes.delete(property.name);
        d.element.removeAttribute(property.name);
      } else if (property.type == 'boolean' && value) {
        d.attributes.set(property.name, "");
        d.element.setAttribute(property.name, "");
      } else {
        d.attributes.set(property.name, value);
        d.element.setAttribute(property.name, value);
      }
    }
  }

  clearValue(designItems, property) {
    for (let d of designItems) {
      d.attributes.delete(property.name);
      d.element.removeAttribute(property.name);
    }
  }

  isSet(designItems, property) {
    let all = true;
    let some = false;

    if (designItems != null && designItems.length !== 0) {
      let attributeName = property.name;
      designItems.forEach(x => {
        let has = x.attributes.has(attributeName);
        all = all && has;
        some = some || has;
      });
    } else return ValueType.none;

    return all ? ValueType.all : some ? ValueType.some : ValueType.none;
  }

  getValue(designItems, property) {
    if (designItems != null && designItems.length !== 0) {
      let attributeName = property.name;
      if (property.type == 'boolean') return designItems[0].attributes.has(attributeName);
      let lastValue = designItems[0].attributes.get(attributeName);
      /*
      for (const x of designItems) {
        let value = x.attributes.get(attributeName);
        if (value != lastValue) {
          lastValue = null;
          break;
        }
      }
      */

      return lastValue;
    }

    return null;
  }

  getUnsetValue(designItems, property) {
    return property.defaultValue;
  }

}