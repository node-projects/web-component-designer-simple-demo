import { ValueType } from '../ValueType.js';
import { BindingTarget } from '../../../item/BindingTarget.js';
import { PropertyType } from '../PropertyType.js';
export class CommonPropertiesService {
    listNeedsRefresh(designItem) {
        return true;
    }
    //@ts-ignore
    commonProperties = [
        {
            name: "id",
            type: "string",
            service: this,
            propertyType: PropertyType.propertyAndAttribute
        }, {
            name: "class",
            type: "string",
            service: this,
            attributeName: "class",
            propertyName: "className",
            propertyType: PropertyType.propertyAndAttribute
        }, {
            name: "title",
            type: "string",
            service: this,
            propertyType: PropertyType.propertyAndAttribute
        }, {
            name: "tabindex",
            type: "number",
            service: this,
            propertyType: PropertyType.propertyAndAttribute
        }
    ];
    name = "common";
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return this.commonProperties[name];
    }
    getProperties(designItem) {
        return this.commonProperties;
    }
    setValue(designItems, property, value) {
        for (let d of designItems) {
            if (property.type == 'boolean' && !value) {
                d.attributes.delete(property.name);
                d.element.removeAttribute(property.name);
            }
            else if (property.type == 'boolean' && value) {
                d.attributes.set(property.name, "");
                d.element.setAttribute(property.name, "");
            }
            else {
                d.attributes.set(property.name, value);
                d.element.setAttribute(property.name, value);
            }
        }
    }
    getPropertyTarget(designItem, property) {
        return BindingTarget.property;
    }
    clearValue(designItems, property) {
        for (let d of designItems) {
            d.attributes.delete(property.name);
            d.element.removeAttribute(property.name);
            d.serviceContainer.forSomeServicesTillResult('bindingService', (s) => {
                return s.clearBinding(d, property.name, this.getPropertyTarget(d, property));
            });
        }
    }
    isSet(designItems, property) {
        let all = true;
        let some = false;
        if (designItems != null && designItems.length !== 0) {
            let attributeName = property.name;
            designItems.forEach((x) => {
                let has = x.attributes.has(attributeName);
                all = all && has;
                some = some || has;
            });
            //todo: optimize perf, do not call bindings service for each property. 
            const bindings = designItems[0].serviceContainer.forSomeServicesTillResult('bindingService', (s) => {
                return s.getBindings(designItems[0]);
            });
            if (bindings && bindings.find(x => x.target == BindingTarget.property && x.targetName == property.name))
                return ValueType.bound;
        }
        else
            return ValueType.none;
        return all ? ValueType.all : some ? ValueType.some : ValueType.none;
    }
    getValue(designItems, property) {
        if (designItems != null && designItems.length !== 0) {
            let attributeName = property.name;
            if (property.type == 'boolean')
                return designItems[0].attributes.has(attributeName);
            let lastValue = designItems[0].attributes.get(attributeName);
            /*
            for (const x of designItems) {
              let value = x.attributes.get(attributeName);
              if (value != lastValue) {
                lastValue = null;
                break;
              }
            }
            */
            return lastValue;
        }
        return null;
    }
    getBinding(designItems, property) {
        //TODO: optimize perf, do not call bindings service for each property. 
        const bindings = designItems[0].serviceContainer.forSomeServicesTillResult('bindingService', (s) => {
            return s.getBindings(designItems[0]);
        });
        return bindings.find(x => (x.target == BindingTarget.property || x.target == BindingTarget.attribute) && x.targetName == property.name);
    }
    getUnsetValue(designItems, property) {
        return property.defaultValue;
    }
}
