import { AbstractPolymerLikePropertiesService } from './AbstractPolymerLikePropertiesService.js';
import { PropertiesHelper } from './PropertiesHelper.js';
import { PropertyType } from '../PropertyType.js';
export class Lit2PropertiesService extends AbstractPolymerLikePropertiesService {
    name = "lit2";
    isHandledElement(designItem) {
        let prop = designItem.element.constructor.elementProperties;
        if (prop)
            return true;
        return false;
    }
    getProperties(designItem) {
        if (!this.isHandledElement(designItem))
            return null;
        let properties = [];
        for (const p of designItem.element.constructor.elementProperties.entries()) {
            let name = p[0];
            const litProperty = p[1];
            let type = litProperty;
            if (litProperty.type)
                type = litProperty.type;
            if (type === String) {
                let property = { name: name, type: "string", service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
            else if (type === Object) {
                let property = { name: name, type: "string", service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
            else if (type === Number) {
                let property = { name: name, type: "number", service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
            else if (type === Date) {
                let property = { name: name, type: "date", service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
            else if (type === Boolean) {
                let property = { name: name, type: "boolean", service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
            else if (PropertiesHelper.isTypescriptEnum(type)) {
                let property = { name: name, type: "enum", enumValues: PropertiesHelper.getTypescriptEnumEntries(type), service: this, propertyType: PropertyType.propertyAndAttribute };
                properties.push(property);
            }
        }
        return properties;
    }
    _notifyChangedProperty(designItem, property, value) {
    }
}
