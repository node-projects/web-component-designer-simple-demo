import { BindingTarget } from '../../../item/BindingTarget.js';
import { PropertyType } from '../PropertyType.js';
import { CommonPropertiesService } from './CommonPropertiesService.js';
import { RefreshMode } from '../IPropertiesService.js';
import { PropertiesHelper } from './PropertiesHelper.js';
//TODO: remove this code when import asserts are supported
let cssProperties;
//@ts-ignore
if (window.importShim) {
    const cssPropertiesUrl = import.meta.resolve('./CssProperties.json');
    //@ts-ignore
    cssProperties = await importShim(cssPropertiesUrl, { assert: { type: 'json' } });
}
else
    //@ts-ignore
    cssProperties = await import("./CssProperties.json", { assert: { type: 'json' } });
if (cssProperties.default)
    cssProperties = cssProperties.default;
export class CssPropertiesService extends CommonPropertiesService {
    getRefreshMode(designItem) {
        return RefreshMode.none;
    }
    //metrics
    layout = [
        "display",
        "color",
        "background-color",
        "box-sizing",
        "border",
        "box-shadow",
        "opacity",
        "position",
        "font-size",
        "font-weight",
        "inset",
        "margin",
        "border",
        "padding"
    ];
    grid = [
        "display",
        "position",
        "grid-template-columns",
        "grid-template-rows",
        "column-gap",
        "row-gap",
        "align-content",
        "justify-content",
        "align-items",
        "justify-items"
    ];
    flex = [
        "display",
        "position",
        "flex-direction",
        "flex-wrap",
        "align-content",
        "justify-content",
        "align-items"
    ];
    constructor(name) {
        super();
        this.name = name;
    }
    isHandledElement(designItem) {
        return true;
    }
    getProperty(designItem, name) {
        return this[this.name][name];
    }
    getProperties(designItem) {
        const propNames = this[this.name];
        const propertiesList = propNames.map(x => {
            const camelName = PropertiesHelper.dashToCamelCase(x);
            return {
                name: x,
                type: cssProperties[camelName]?.type ?? 'string',
                values: cssProperties[camelName]?.values ? [...cssProperties[camelName]?.values, 'initial', 'inherit', 'unset'] : ['initial', 'inherit', 'unset'],
                service: this,
                propertyType: PropertyType.cssValue
            };
        });
        return propertiesList;
    }
    getPropertyTarget(designItem, property) {
        return BindingTarget.css;
    }
}
