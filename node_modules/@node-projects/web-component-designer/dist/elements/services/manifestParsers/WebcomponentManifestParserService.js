import { BindingTarget } from '../../item/BindingTarget.js';
import { PropertyType } from '../propertiesService/PropertyType.js';
import { UnkownElementPropertiesService } from '../propertiesService/services/UnkownElementPropertiesService.js';
export class WebcomponentManifestParserService extends UnkownElementPropertiesService {
    _name;
    get name() { return this._name; }
    _packageData;
    _elementList;
    _propertiesList;
    _resolveStored;
    _rejectStored;
    _importPrefix = '';
    constructor(name, fileOrObject, importPrefix = '') {
        super();
        this._name = name;
        this._importPrefix = importPrefix;
        if (typeof fileOrObject === 'string') {
            this._importPrefix = this._importPrefix ?? fileOrObject.split('/').slice(0, -1).join('/');
            import(fileOrObject, { assert: { type: 'json' } }).then(module => {
                this._packageData = module.default;
                this._parseManifest();
            }).catch(err => {
                if (this._rejectStored) {
                    this._rejectStored.forEach(x => x(err));
                    this._resolveStored = null;
                    this._rejectStored = null;
                }
            });
        }
        else {
            this._packageData = fileOrObject;
            this._parseManifest();
        }
    }
    _parseManifest() {
        this._elementList = [];
        this._propertiesList = {};
        for (let m of this._packageData.modules) {
            for (let e of m.exports) {
                if (e.kind == 'custom-element-definition') {
                    this._elementList.push({ tag: e.name, import: this._importPrefix + '/' + e.declaration.module });
                    let properties = [];
                    let declaration = m.declarations.find(x => x.name == e.declaration.name);
                    for (let d of declaration.members) {
                        if (d.kind == 'field') {
                            let pType = PropertyType.property;
                            if (declaration.attributes)
                                pType = declaration.attributes.find(x => x.fieldName == d.name) != null ? PropertyType.propertyAndAttribute : PropertyType.property;
                            properties.push({ name: d.name, service: this, propertyType: pType, type: this.manifestClassPropertyTypeToEditorPropertyType(d.type?.text) });
                        }
                    }
                    this._propertiesList[e.name] = properties;
                }
            }
            if (this._resolveStored) {
                this._resolveStored.forEach(x => x(this._elementList));
                this._resolveStored = null;
                this._rejectStored = null;
            }
        }
    }
    manifestClassPropertyTypeToEditorPropertyType(type) {
        if (type) {
            if (type.toLowerCase() === 'boolean')
                return 'boolean';
            if (type.toLowerCase() === 'number')
                return 'number';
        }
        return type;
    }
    async getElements() {
        if (this._packageData)
            return Promise.resolve(this._elementList);
        if (!this._resolveStored) {
            this._resolveStored = [];
            this._rejectStored = [];
        }
        return new Promise((resolve, reject) => { this._resolveStored.push(resolve); this._rejectStored.push(reject); });
    }
    isHandledElement(designItem) {
        if (this._elementList)
            return this._elementList.find(x => x.tag == designItem.name) != null;
        return false;
    }
    getProperties(designItem) {
        return this._propertiesList[designItem.name];
    }
    getProperty(designItem, name) {
        return this._propertiesList[designItem.name].find(x => x.name == name);
    }
    getPropertyTarget(designItem, property) {
        return this._propertiesList[designItem.name].find(x => x.name == property.name).propertyType == PropertyType.attribute ? BindingTarget.attribute : BindingTarget.property;
    }
}
