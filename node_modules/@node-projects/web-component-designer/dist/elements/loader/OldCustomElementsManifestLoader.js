import { LazyLoader } from '@node-projects/base-custom-webcomponent';
import { PreDefinedElementsService } from '../services/elementsService/PreDefinedElementsService.js';
import { ListPropertiesService } from '../services/propertiesService/services/ListPropertiesService.js';
export class OldCustomElementsManifestLoader {
    static async loadManifest(serviceContainer, nodeModule, options) {
        const nodePath = './node_modules/';
        const packageJson = JSON.parse(await LazyLoader.LoadText(nodePath + nodeModule + '/package.json'));
        let jsModule = nodePath + nodeModule + '/' + packageJson.main;
        if (packageJson.module)
            jsModule = nodePath + nodeModule + '/' + packageJson.module;
        const manifest = JSON.parse(await LazyLoader.LoadText(nodePath + nodeModule + '/' + packageJson.customElementsManifest));
        let name = nodeModule;
        if (options && options.name)
            name = options.name;
        if (!options || !options.dontLoadWidgets) {
            const elementDefinitions = [];
            for (const tag of manifest.tags) {
                const elementDefinition = { tag: tag.name, import: jsModule, description: tag.description };
                elementDefinitions.push(elementDefinition);
            }
            const service = new PreDefinedElementsService(name, { elements: elementDefinitions });
            serviceContainer.register('elementsService', service);
        }
        if (!options || !options.dontLoadProperties) {
            const propertyDefinitions = {};
            for (const tag of manifest.tags) {
                const attributes = [];
                for (const attr of tag.attributes) {
                    let propertyDefinition = { name: attr.name, default: attr.default, description: attr.description };
                    if (attr.type && attr.type.startsWith('"')) {
                        propertyDefinition.type = 'list';
                        propertyDefinition.values = attr.type.split('|');
                    }
                    else {
                        propertyDefinition.type = attr.type;
                    }
                    attributes.push(propertyDefinition);
                }
                propertyDefinitions[tag.name] = attributes;
            }
            const service = new ListPropertiesService(propertyDefinitions);
            serviceContainer.register('propertyService', service);
        }
    }
}
