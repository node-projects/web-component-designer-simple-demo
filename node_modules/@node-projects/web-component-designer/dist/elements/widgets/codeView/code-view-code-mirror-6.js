import { BaseCustomWebComponentLazyAppend, css, html, TypedEvent } from '@node-projects/base-custom-webcomponent';
import { CommandType } from '../../../commandHandling/CommandType.js';
export class CodeViewCodeMirror6 extends BaseCustomWebComponentLazyAppend {
    canvasElement;
    elementsToPackages;
    code;
    onTextChanged = new TypedEvent();
    mode = 'xml';
    _editor;
    static style = css `
    :host {
      display: block;
      height: 100%;
      width: 100%;
      background: white;
    }
    .cm-editor {
      height: 100%
    }`;
    static template = html `
    <div id="container" style="width: 100%; height: 100%; overflow: auto;">
    </div>`;
    _cm;
    constructor() {
        super();
        this._restoreCachedInititalValues();
        import("codemirror").then(async (cm) => {
            this._cm = cm;
            let js = await import("@codemirror/lang-javascript");
            let html = await import("@codemirror/lang-html");
            this._editor = new cm.EditorView({
                extensions: [cm.basicSetup, js.javascript(), html.html()],
                parent: this._getDomElement('container')
            });
        });
    }
    ready() {
        /* this._codeMirrorEditor.on('change', () => this.onTextChanged.emit(this._codeMirrorEditor.getValue()))*/
    }
    dispose() {
    }
    async executeCommand(command) {
        let cmds = await import("@codemirror/commands");
        switch (command.type) {
            case CommandType.undo:
                cmds.undo(this._editor);
                break;
            case CommandType.redo:
                cmds.redo(this._editor);
                break;
            case CommandType.copy:
                const text = this._codeMirrorEditor.getSelection();
                navigator.clipboard.writeText(text);
                break;
            case CommandType.paste:
                navigator.clipboard.readText().then(text => {
                    this._codeMirrorEditor.replaceSelection(text);
                });
                break;
            case CommandType.cut:
                const textc = this._codeMirrorEditor.getSelection();
                navigator.clipboard.writeText(textc);
                this._codeMirrorEditor.replaceSelection('');
                break;
            case CommandType.delete:
                this._codeMirrorEditor.replaceSelection('');
                break;
        }
    }
    canExecuteCommand(command) {
        switch (command.type) {
            case CommandType.undo:
            case CommandType.redo:
            case CommandType.copy:
            case CommandType.paste:
            case CommandType.cut:
            case CommandType.delete:
                return true;
        }
        return false;
    }
    focusEditor() {
        requestAnimationFrame(() => {
            this.focus();
            this._editor.focus();
        });
    }
    update(code) {
        this._editor.dispatch({
            changes: { from: 0, to: this._editor.state.doc.length, insert: code }
        });
    }
    getText() {
        return this._editor.state.doc.toString();
    }
    setSelection(position) {
        this._editor.dispatch({
            selection: { anchor: position.start, head: position.start + position.length }
        });
    }
}
customElements.define('node-projects-code-view-code-mirror-6', CodeViewCodeMirror6);
