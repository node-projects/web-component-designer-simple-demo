import { BaseCustomWebComponentLazyAppend, css, html, TypedEvent } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { CommandType } from '../../../commandHandling/CommandType.js';
export class CodeViewMonaco extends BaseCustomWebComponentLazyAppend {
    dispose() {
        this._monacoEditor.dispose();
    }
    canvasElement;
    elementsToPackages;
    code;
    onTextChanged = new TypedEvent();
    _monacoEditor;
    _editor;
    static style = css `
    :host {
      display: block;
      height: 100%;
      width: 100%;
    }
    `;
    static template = html `
      <div id="container" style="width: 100%; height: 100%; position: absolute;"></div>
  `;
    executeCommand(command) {
        switch (command.type) {
            case CommandType.undo:
                this._monacoEditor.trigger('source', 'undo', null);
                break;
            case CommandType.redo:
                this._monacoEditor.trigger('source', 'redo', null);
                break;
            case CommandType.copy:
                this._monacoEditor.trigger('source', 'editor.action.clipboardCopyAction', null);
                break;
            case CommandType.paste:
                this._monacoEditor.trigger('source', 'editor.action.clipboardPasteAction', null);
                break;
            case CommandType.cut:
                break;
            case CommandType.delete:
                break;
        }
    }
    canExecuteCommand(command) {
        switch (command.type) {
            case CommandType.undo:
            case CommandType.redo:
            case CommandType.copy:
            case CommandType.paste:
            case CommandType.cut:
            case CommandType.delete:
                return true;
        }
        return false;
    }
    async ready() {
        //@ts-ignore
        const style = await import("monaco-editor/min/vs/editor/editor.main.css", { assert: { type: 'css' } });
        this.shadowRoot.adoptedStyleSheets = [style.default, this.constructor.style];
        this._editor = this._getDomElement('container');
        //@ts-ignore
        require.config({ paths: { 'vs': 'node_modules/monaco-editor/min/vs' } });
        //@ts-ignore
        require(['vs/editor/editor.main'], () => {
            //@ts-ignore
            this._monacoEditor = monaco.editor.create(this._editor, {
                automaticLayout: true,
                value: this.code,
                language: 'html',
                minimap: {
                    size: 'fill'
                },
                fixedOverflowWidgets: true
            });
            this._monacoEditor.layout();
            let changeContentListener = this._monacoEditor.getModel().onDidChangeContent(e => {
                this.onTextChanged.emit(this._monacoEditor.getValue());
            });
            this._monacoEditor.onDidChangeModel(e => {
                changeContentListener.dispose();
                changeContentListener = this._monacoEditor.getModel().onDidChangeContent(e => {
                    this.onTextChanged.emit(this._monacoEditor.getValue());
                });
            });
        });
    }
    focusEditor() {
        requestAnimationFrame(() => {
            this.focus();
            this._monacoEditor.focus();
        });
    }
    activated() {
        if (this._monacoEditor)
            this._monacoEditor.layout();
    }
    update(code) {
        this.code = code;
        if (this._monacoEditor) {
            this._monacoEditor.setValue(code);
        }
    }
    getText() {
        return this._monacoEditor.getValue();
    }
    setSelection(position) {
        let model = this._monacoEditor.getModel();
        let point1 = model.getPositionAt(position.start);
        let point2 = model.getPositionAt(position.start + position.length);
        this._monacoEditor.setSelection({ startLineNumber: point1.lineNumber, startColumn: point1.column, endLineNumber: point2.lineNumber, endColumn: point2.column });
        setTimeout(() => this._monacoEditor.revealLine(point1.lineNumber), 20);
    }
}
customElements.define('node-projects-code-view-monaco', CodeViewMonaco);
