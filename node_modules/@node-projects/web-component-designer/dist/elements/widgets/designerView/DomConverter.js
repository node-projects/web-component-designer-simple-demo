import { IndentedTextWriter } from '../../helper/IndentedTextWriter.js';
export class DomConverter {
    static normalizeAttributeValue(value) {
        if (value)
            return value.replace(/"/g, '&quot;');
        return value;
    }
    static normalizeContentValue(value) {
        if (value)
            return value.replace(/</g, '&lt;');
        return value;
    }
    static IsSelfClosingElement(tag) {
        return tag === 'area' ||
            tag === 'base' ||
            tag === 'br' ||
            tag === 'col' ||
            tag === 'embed' ||
            tag === 'hr' ||
            tag === 'iframe' ||
            tag === 'img' ||
            tag === 'input' ||
            tag === 'keygen' ||
            tag === 'link' ||
            tag === 'meta' ||
            tag === 'param' ||
            tag === 'source' ||
            tag === 'track' ||
            tag === 'wbr';
    }
    static ConvertToString(designItems, designItemsAssignmentList) {
        let itw = new IndentedTextWriter();
        let options = { beautifyOutput: true, writeDesignerProperties: true, compressCssToShorthandProperties: true };
        for (let d of designItems) {
            d.serviceContainer.forSomeServicesTillResult('htmlWriterService', (s) => {
                if (s.canWrite(d))
                    s.write(itw, d, options, designItemsAssignmentList);
            });
        }
        return itw.getString();
    }
}
