import { BaseCustomWebComponentLazyAppend, css, html } from "../../../../../base-custom-webcomponent/dist/index.js";
import { OverlayLayer } from './extensions/OverlayLayer.js';
export class OverlayLayerView extends BaseCustomWebComponentLazyAppend {
  constructor(serviceContainer) {
    super();
    this._serviceContainer = serviceContainer;
    this._svg = this._getDomElement('svg');
    this._gBackground = this._getDomElement('background');
    this._gNormal = this._getDomElement('normal');
    this._gForeground = this._getDomElement('foreground');

    this._initialize();
  }

  _initialize() {
    let styles = [OverlayLayerView.style];

    for (const extList of this._serviceContainer.designerExtensions) {
      for (const ext of extList[1]) {
        if (ext.style) {
          styles.push(ext.style);
        }
      }
    }

    this.shadowRoot.adoptedStyleSheets = styles;
  }

  addOverlay(element, overlayLayer = OverlayLayer.Normal) {
    switch (overlayLayer) {
      case OverlayLayer.Background:
        this._gBackground.appendChild(element);

        break;

      case OverlayLayer.Foregorund:
        this._gForeground.appendChild(element);

        break;

      default:
        this._gNormal.appendChild(element);

        break;
    }
  }

  removeOverlay(element) {
    element.parentElement.removeChild(element);
  }

  removeAllNodesWithClass(className) {
    const nodes = this._svg.querySelectorAll('.' + className);

    for (const e of nodes) {
      e.parentNode.removeChild(e);
    }
  }

  createPoint() {
    //@ts-ignore
    return this._svg.createSVGPoint();
  }

  elementFromPoint(x, y) {
    //@ts-ignore
    return this.shadowRoot.elementFromPoint(x, y);
  }

}
OverlayLayerView.template = html`
    <svg id="svg" style="pointer-events: none;">
      <g id="background"></g>
      <g id="normal"></g>
      <g id="foreground"></g>
    </svg>`;
OverlayLayerView.style = css`
    svg {
      width: 100%;
      height: 100%;
    }

    .svg-snapline { stroke: purple; stroke-dasharray: 4; fill: transparent; }
    /*.svg-selection { stroke: #3899ec; fill: transparent; stroke-width: 2; }*/
    .svg-selector { stroke: black; fill: transparent; stroke-width: 1; stroke-dasharray: 2; }
    .svg-primary-selection-move { stroke: #3899ec; fill: #3899ec; cursor: move; pointer-events: all }
    .svg-text { stroke: none; fill: white; stroke-width: 1; font-size: 10px; font-family: monospace; }
    .svg-primary-resizer { stroke: #3899ec; fill: white; pointer-events: all }
    .svg-position  { stroke: black; stroke-dasharray: 2; }
    .svg-path { stroke: #3899ec; fill: orange; pointer-events: all }
    .svg-path-line { stroke: #3899ec; stroke-dasharray: 2; }
    .svg-draw-new-element { stroke: black; fill: transparent; stroke-width: 1; }`;
OverlayLayerView.is = 'node-projects-overlay-layer-view';
customElements.define(OverlayLayerView.is, OverlayLayerView);