import { DomHelper } from "../../../../../base-custom-webcomponent/dist/index.js";
export class Snaplines {
  constructor(svg) {
    this.snapOffset = 15;
    this._positionsH = [];
    this._positionsMiddleH = [];
    this._positionsV = [];
    this._positionsMiddleV = [];
    this._svg = svg;
  }

  initialize(containerItem) {
    //add snapline layer
    this._containerItem = containerItem;
  }

  clearSnaplines() {
    DomHelper.removeAllChildnodes(this._svg, 'svg-snapline');
    this._positionsH = [];
    this._positionsMiddleH = [];
    this._positionsV = [];
    this._positionsMiddleV = [];
  }

  calculateSnaplines(ignoredItems) {
    this.clearSnaplines();
    let ignMap = new Map(ignoredItems.map(i => [i.element, i]));
    this._outerRect = this._containerItem.element.getBoundingClientRect();
    let ignoreElements = ignoredItems.map(x => x.element);

    for (let n of DomHelper.getAllChildNodes(this._containerItem.element, false, ignoreElements)) {
      if (!ignMap.has(n)) {
        let p = n.getBoundingClientRect();
        let pLeft = p.x - this._outerRect.x;
        let pMidH = p.x - this._outerRect.x + p.width / 2;
        let pRight = p.x - this._outerRect.x + p.width;

        this._positionsH.push([pLeft, p]);

        this._positionsMiddleH.push([pMidH, p]);

        this._positionsH.push([pRight, p]);

        let pTop = p.y - this._outerRect.y;
        let pMidV = p.y - this._outerRect.y + p.height / 2;
        let pBottom = p.y - this._outerRect.y + p.height;

        this._positionsV.push([pTop, p]);

        this._positionsMiddleV.push([pMidV, p]);

        this._positionsV.push([pBottom, p]);
      }
    }

    this._positionsH.sort((a, b) => a[0] - b[0]);

    this._positionsMiddleH.sort((a, b) => a[0] - b[0]);

    this._positionsV.sort((a, b) => a[0] - b[0]);

    this._positionsMiddleV.sort((a, b) => a[0] - b[0]);
  } //return the snapped position


  snapToPosition(position, size, moveDirection) {
    let minDiff = this.snapOffset + 1;
    let pH = undefined;
    let posH = undefined;

    for (let i = 0; i < this._positionsH.length; i++) {
      let akDiff1 = Math.abs(this._positionsH[i][0] - position.x);

      if (akDiff1 < minDiff || akDiff1 === minDiff && pH === undefined) {
        minDiff = akDiff1;
        pH = [];
        posH = this._positionsH[i][0];
      }

      let akDiff2;

      if (size) {
        akDiff2 = Math.abs(position.x + size.width - this._positionsH[i][0]);

        if (akDiff2 < minDiff || akDiff2 === minDiff && pH === undefined) {
          minDiff = akDiff2;
          pH = [];
          posH = this._positionsH[i][0] - size.width;
        }
      }

      if (akDiff1 === minDiff) {
        pH.push(this._positionsH[i][1]);
      }

      if (size) {
        if (akDiff2 === minDiff && akDiff1 !== minDiff) {
          pH.push(this._positionsH[i][1]);
        }
      }
    }

    if (size) {
      for (let i = 0; i < this._positionsMiddleH.length; i++) {
        let akDiff1 = Math.abs(this._positionsMiddleH[i][0] - (position.x + size.width / 2));

        if (akDiff1 < minDiff || akDiff1 === minDiff && pH === undefined) {
          minDiff = akDiff1;
          pH = [];
          posH = this._positionsMiddleH[i][0] - size.width / 2;
        }

        if (akDiff1 === minDiff) {
          pH.push(this._positionsMiddleH[i][1]);
        }
      }
    }

    minDiff = this.snapOffset + 1;
    let pV = undefined;
    let posV = undefined;

    for (let i = 0; i < this._positionsV.length; i++) {
      let akDiff1 = Math.abs(this._positionsV[i][0] - position.y);

      if (akDiff1 < minDiff || akDiff1 === minDiff && pV === undefined) {
        minDiff = akDiff1;
        pV = [];
        posV = this._positionsV[i][0];
      }

      let akDiff2;

      if (size) {
        akDiff2 = Math.abs(position.y + size.height - this._positionsV[i][0]);

        if (akDiff2 < minDiff || akDiff2 === minDiff && pV === undefined) {
          minDiff = akDiff2;
          pV = [];
          posV = this._positionsV[i][0] - size.height;
        }
      }

      if (akDiff1 === minDiff) {
        pV.push(this._positionsV[i][1]);
      }

      if (size) {
        if (akDiff2 === minDiff && akDiff1 !== minDiff) {
          pV.push(this._positionsV[i][1]);
        }
      }
    }

    if (size) {
      for (let i = 0; i < this._positionsMiddleV.length; i++) {
        let akDiff1 = Math.abs(this._positionsMiddleV[i][0] - (position.y + size.height / 2));

        if (akDiff1 < minDiff || akDiff1 === minDiff && pV === undefined) {
          minDiff = akDiff1;
          pV = [];
          posV = this._positionsMiddleV[i][0] - size.height / 2;
        }

        if (akDiff1 === minDiff) {
          pV.push(this._positionsMiddleV[i][1]);
        }
      }
    }

    DomHelper.removeAllChildnodes(this._svg, 'svg-snapline');

    if (pH !== undefined || pV !== undefined) {
      let pos = {
        x: pH !== undefined ? posH : position.x,
        y: pV !== undefined ? posV : position.y
      };
      this.drawSnaplines(pos, size, pH, pV);
      return {
        x: pH !== undefined ? posH : null,
        y: pV !== undefined ? posV : null
      };
    }

    return {
      x: null,
      y: null
    };
  }

  drawSnaplines(position, size, rectsH, rectsV) {
    if (rectsH) {
      let minY = position.y;
      let maxY = position.y;

      for (const r of rectsH) {
        let ry = r.y - this._outerRect.top;
        minY = minY < ry ? minY : ry;
        maxY = maxY > ry ? maxY : ry;
      }

      for (const r of rectsH) {
        if (r.x - this._outerRect.left == position.x || size && r.x - this._outerRect.left == position.x + size.width) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', r.x - this._outerRect.x);
          line.setAttribute('x2', r.x - this._outerRect.x);
          line.setAttribute('y1', minY);
          line.setAttribute('y2', maxY);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        if (r.x - this._outerRect.left + r.width == position.x || size && r.x - this._outerRect.left + r.width == position.x + size.width) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', r.x - this._outerRect.x + r.width);
          line.setAttribute('x2', r.x - this._outerRect.x + r.width);
          line.setAttribute('y1', minY);
          line.setAttribute('y2', maxY);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        if (size && r.x - this._outerRect.left + r.width / 2 == position.x + size.width / 2) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', r.x - this._outerRect.x + r.width / 2);
          line.setAttribute('x2', r.x - this._outerRect.x + r.width / 2);
          line.setAttribute('y1', minY);
          line.setAttribute('y2', maxY);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute('x', r.x - this._outerRect.x);
        rect.setAttribute('width', r.width);
        rect.setAttribute('y', r.y - this._outerRect.y);
        rect.setAttribute('height', r.height);
        rect.setAttribute('class', 'svg-snapline');

        this._svg.appendChild(rect);
      }
    }

    if (rectsV) {
      let minX = position.x;
      let maxX = position.x;

      for (const r of rectsV) {
        let rx = r.x - this._outerRect.left;
        minX = minX < rx ? minX : rx;
        maxX = maxX > rx ? maxX : rx;
      }

      for (const r of rectsV) {
        if (r.y - this._outerRect.top == position.y || size && r.y - this._outerRect.top == position.y + size.height) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', minX);
          line.setAttribute('x2', maxX);
          line.setAttribute('y1', r.y - this._outerRect.y);
          line.setAttribute('y2', r.y - this._outerRect.y);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        if (r.y - this._outerRect.top + r.height == position.y || size && r.y - this._outerRect.top + r.height == position.y + size.height) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', minX);
          line.setAttribute('x2', maxX);
          line.setAttribute('y1', r.y - this._outerRect.y + r.height);
          line.setAttribute('y2', r.y - this._outerRect.y + r.height);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        if (size && r.y - this._outerRect.top + r.height / 2 == position.y + size.height / 2) {
          let line = document.createElementNS("http://www.w3.org/2000/svg", "line");
          line.setAttribute('x1', minX);
          line.setAttribute('x2', maxX);
          line.setAttribute('y1', r.y - this._outerRect.y + r.height / 2);
          line.setAttribute('y2', r.y - this._outerRect.y + r.height / 2);
          line.setAttribute('class', 'svg-snapline');

          this._svg.appendChild(line);
        }

        let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
        rect.setAttribute('x', r.x - this._outerRect.x);
        rect.setAttribute('width', r.width);
        rect.setAttribute('y', r.y - this._outerRect.y);
        rect.setAttribute('height', r.height);
        rect.setAttribute('class', 'svg-snapline');

        this._svg.appendChild(rect);
      }
    }
  }

}