import { EventNames } from '../../../../enums/EventNames.js';
import { DesignItem } from '../../../item/DesignItem.js';
import { InsertAction } from '../../../services/undoService/transactionItems/InsertAction.js';
import { ExtensionType } from '../extensions/ExtensionType.js';
export class TextTool {
    constructor() {
    }
    activated(serviceContainer) {
    }
    dispose() {
    }
    cursor = 'text';
    pointerEventHandler(designerCanvas, event, currentElement) {
        const currentPoint = designerCanvas.getNormalizedEventCoordinates(event);
        switch (event.type) {
            case EventNames.PointerDown:
                const span = document.createElement('span');
                const di = DesignItem.createDesignItemFromInstance(span, designerCanvas.serviceContainer, designerCanvas.instanceServiceContainer);
                di.setStyle('position', 'absolute');
                di.setStyle('left', currentPoint.x + 'px');
                di.setStyle('top', currentPoint.y + 'px');
                designerCanvas.instanceServiceContainer.undoService.execute(new InsertAction(designerCanvas.rootDesignItem, designerCanvas.rootDesignItem.childCount, di));
                //designerCanvas.serviceContainer.globalContext.finishedWithTool(this);
                //todo: we need to keep the tool active, cause the pointer tool eats the stylo events. Maybe we could also remove the eatEvents property
                //TODO - don't apply doubleclick extension (maybe it is not the doubleclick one) - apply edit text extesion directly
                //should we configure the editTextExtension anywhere??
                designerCanvas.extensionManager.applyExtension(di, ExtensionType.Doubleclick);
                setTimeout(() => {
                    span.focus();
                }, 50);
                break;
        }
    }
    keyboardEventHandler(designerCanvas, event, currentElement) { }
}
