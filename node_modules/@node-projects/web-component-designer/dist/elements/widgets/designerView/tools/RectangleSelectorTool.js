import { EventNames } from '../../../../enums/EventNames.js';
import { DesignItem } from '../../../item/DesignItem.js';
import { OverlayLayer } from '../extensions/OverlayLayer.js';
export class RectangleSelectorTool {
    cursor = 'progress';
    _rect;
    _initialPoint;
    activated(serviceContainer) {
    }
    pointerEventHandler(designerCanvas, event, currentElement) {
        const currentPoint = designerCanvas.getNormalizedEventCoordinates(event);
        switch (event.type) {
            case EventNames.PointerDown:
                event.target.setPointerCapture(event.pointerId);
                this._initialPoint = currentPoint;
                if (!this._rect)
                    this._rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                this._rect.setAttribute('class', 'svg-selector');
                this._rect.setAttribute('x', this._initialPoint.x);
                this._rect.setAttribute('y', this._initialPoint.y);
                this._rect.setAttribute('width', 0);
                this._rect.setAttribute('height', 0);
                designerCanvas.overlayLayer.addOverlay(this._rect, OverlayLayer.Foregorund);
                break;
            case EventNames.PointerMove:
                if (this._initialPoint) {
                    console.warn(currentPoint);
                    let w = currentPoint.x - this._initialPoint.x;
                    let h = currentPoint.y - this._initialPoint.y;
                    if (w >= 0) {
                        this._rect.setAttribute('x', this._initialPoint.x);
                        this._rect.setAttribute('width', w);
                    }
                    else {
                        this._rect.setAttribute('x', currentPoint.x);
                        this._rect.setAttribute('width', (-1 * w));
                    }
                    if (h >= 0) {
                        this._rect.setAttribute('y', this._initialPoint.y);
                        this._rect.setAttribute('height', h);
                    }
                    else {
                        this._rect.setAttribute('y', currentPoint.y);
                        this._rect.setAttribute('height', (-1 * h));
                    }
                }
                break;
            case EventNames.PointerUp:
                event.target.releasePointerCapture(event.pointerId);
                const elements = designerCanvas.rootDesignItem.element.querySelectorAll('*');
                const inSelectionElements = [];
                let point = designerCanvas.overlayLayer.createPoint();
                for (let e of elements) {
                    let elementRect = e.getBoundingClientRect();
                    point.x = elementRect.left - designerCanvas.containerBoundingRect.left;
                    point.y = elementRect.top - designerCanvas.containerBoundingRect.top;
                    const p1 = this._rect.isPointInFill(point);
                    point.x = elementRect.left - designerCanvas.containerBoundingRect.left + elementRect.width;
                    point.y = elementRect.top - designerCanvas.containerBoundingRect.top;
                    const p2 = p1 && this._rect.isPointInFill(point);
                    point.x = elementRect.left - designerCanvas.containerBoundingRect.left;
                    point.y = elementRect.top - designerCanvas.containerBoundingRect.top + elementRect.height;
                    const p3 = p2 && this._rect.isPointInFill(point);
                    point.x = elementRect.left - designerCanvas.containerBoundingRect.left + elementRect.width;
                    point.y = elementRect.top - designerCanvas.containerBoundingRect.top + elementRect.height;
                    const p4 = p3 && this._rect.isPointInFill(point);
                    if (p4) {
                        const desItem = DesignItem.GetOrCreateDesignItem(e, designerCanvas.serviceContainer, designerCanvas.instanceServiceContainer);
                        inSelectionElements.push(desItem);
                    }
                }
                designerCanvas.overlayLayer.removeOverlay(this._rect);
                this._rect = null;
                this._initialPoint = null;
                designerCanvas.instanceServiceContainer.selectionService.setSelectedElements(inSelectionElements);
                designerCanvas.serviceContainer.globalContext.finishedWithTool(this);
                break;
        }
    }
    dispose() {
    }
}
