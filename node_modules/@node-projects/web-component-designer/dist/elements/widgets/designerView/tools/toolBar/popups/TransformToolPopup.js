import { html, BaseCustomWebComponentConstructorAppend, css } from '@node-projects/base-custom-webcomponent';
import { filterChildPlaceItems } from '../../../../../helper/LayoutHelper.js';
import { calculateOuterRect } from '../../../../../helper/ElementHelper.js';
export class TransformToolPopup extends BaseCustomWebComponentConstructorAppend {
    _designerView;
    _previousSelectionRect;
    _selectionChanged;
    _relativeButton;
    _absoluteButton;
    _applyButton;
    _inputX;
    _inputY;
    _inputR;
    _originTopLeft;
    _originTopMid;
    _originTopRight;
    _originMidLeft;
    _originMidMid;
    _originMidRight;
    _originBotLeft;
    _originBotMid;
    _originBotRight;
    _transformMode;
    _transformOrigin;
    static style = css `
      .container {
          width: 220px;
          min-height: 200px;
          color: white;
          background-color: rgb(64, 64, 64);
          border: 1px solid black;
      }
      header {
          text-align: center;
      }
      .inputs{
        float: left;
        margin-top: 5px;
        align-items: center;
      }
      .input {
        display: flex;
        align-items: center; 
        margin-top: 5px;
      }
      .text {
        margin-left: 5px;
        font-size: 14px;
      }
      .strokecolor{ 
        float: both;
      }
      .fillbrush{
        float: both;
      }
      .strokethickness{
        float: both;
      }
      #input-div{
        display: grid;
        grid-template-columns: 1fr 9fr;
        grid-template-rows: 25px 25px 25px;
        grid-row-gap: 2px;
        font-size: small;
        margin: 10px;
      }
      #button-div{
        display: grid;
        grid-template-columns: 1fr 1fr;
        grid-template-rows: 25px;
        font-size: small;
        margin: 10px;
        grid-column-gap: 5px
      }
      #apply-div{
        font-size: small;
        justify-content: center;
        width: 100%;
        margin-top: 10px;
        margin-bottom: 10px;
        display: flex;
      }
      #cube{
        display: grid;
        grid-template-columns: 20px 20px 20px;
        grid-template-rows: 20px 20px 20px;
        grid-gap: 10px;
        padding: 10px;
        top: -80px;
        position: relative;
      }
      #cube-background{
        width: 60px;
        height: 60px;
        background: gray;
        margin-top: 20px;
        margin-left: 20px;
      }
      `;
    static template = html `
        <div class="container">
          <header>
            <h2 id="title" style="margin:0px;">Transform</h2>
          </header>
          <main id="content-area">
            <div id="input-div">
              <span>X:</span>
              <input type="number" id="transform-input-x">
              <span>Y:</span>
              <input type="number" id="transform-input-y">
              <span>R:</span>
              <input type="number" id="transform-input-r">
            </div>
            <div id="button-div">
              <button id="transform-button-absolute">absolute</button>
              <button id="transform-button-relative">relative</button>
            </div>

            <div style="justify-content: center; display: grid; height: 100px">
              <div id="cube-background"></div>
                <div id="cube">
                  <input id="origin-top-left" type="radio" name="origin-radio">
                  <input id="origin-top-mid" type="radio" name="origin-radio">
                  <input id="origin-top-right" type="radio" name="origin-radio">
                  <input id="origin-mid-left" type="radio" name="origin-radio">
                  <input id="origin-mid-mid" type="radio" name="origin-radio" checked>
                  <input id="origin-mid-right" type="radio" name="origin-radio">
                  <input id="origin-bot-left" type="radio" name="origin-radio">
                  <input id="origin-bot-mid" type="radio" name="origin-radio">
                  <input id="origin-bot-right" type="radio" name="origin-radio">
                </div>
            </div>

            <div id="apply-div">
              <button id="transform-button-apply" style="width:100px;">apply</button>
            </div>
          </main>
        </div>`;
    constructor() {
        super();
        this._relativeButton = this._getDomElement("transform-button-relative");
        this._absoluteButton = this._getDomElement("transform-button-absolute");
        this._applyButton = this._getDomElement("transform-button-apply");
        this._inputX = this._getDomElement("transform-input-x");
        this._inputY = this._getDomElement("transform-input-y");
        this._inputR = this._getDomElement("transform-input-r");
        this._originTopLeft = this._getDomElement("origin-top-left");
        this._originTopMid = this._getDomElement("origin-top-mid");
        this._originTopRight = this._getDomElement("origin-top-right");
        this._originMidLeft = this._getDomElement("origin-mid-left");
        this._originMidMid = this._getDomElement("origin-mid-mid");
        this._originMidRight = this._getDomElement("origin-mid-right");
        this._originBotLeft = this._getDomElement("origin-bot-left");
        this._originBotMid = this._getDomElement("origin-bot-mid");
        this._originBotRight = this._getDomElement("origin-bot-right");
        this._relativeButton.onclick = () => this._changePositionMode("relative");
        this._absoluteButton.onclick = () => this._changePositionMode("absolute");
        this._applyButton.onclick = () => this._applyTransform();
        this._transformMode = "relative";
        this._changePositionMode(this._transformMode);
    }
    _changePositionMode(mode) {
        if (mode == "relative") {
            this._relativeButton.style.backgroundColor = "#6F8A9D";
            this._relativeButton.style.color = "black";
            this._absoluteButton.style.backgroundColor = "#A4B5C1";
            this._absoluteButton.style.color = "#77716E";
        }
        else {
            this._absoluteButton.style.backgroundColor = "#6F8A9D";
            this._absoluteButton.style.color = "black";
            this._relativeButton.style.backgroundColor = "#A4B5C1";
            this._relativeButton.style.color = "#77716E";
        }
        this._transformMode = mode;
    }
    _applyTransform() {
        this._checkOrigin();
        this._designerView = this.getRootNode().host.designerView;
        let selection = this._designerView.instanceServiceContainer.selectionService.selectedElements;
        selection = filterChildPlaceItems(selection);
        this._selectionChanged = false;
        this._designerView.instanceServiceContainer.selectionService.onSelectionChanged.once(() => {
            this._selectionChanged = true;
            this._previousSelectionRect = null;
        });
        if (selection.length != 0) {
            let inputPos = {
                x: isNaN(this._inputX.valueAsNumber) ? null : this._inputX.valueAsNumber,
                y: isNaN(this._inputY.valueAsNumber) ? null : this._inputY.valueAsNumber
            };
            let inputRotation = this._inputR.valueAsNumber ? this._inputR.valueAsNumber : 0;
            let grp = selection[0].openGroup("Transform selection");
            if (!this._previousSelectionRect || this._selectionChanged)
                this._previousSelectionRect = calculateOuterRect(selection, this._designerView.designerCanvas);
            let origin = this._calculateTransformOriginPosition(this._previousSelectionRect);
            for (let item of selection) {
                let itemPos = {
                    x: parseFloat(item.getStyle("left")),
                    y: parseFloat(item.getStyle("top")),
                    width: parseFloat(item.getStyle("width")),
                    height: parseFloat(item.getStyle("height"))
                };
                let itemRotStyle = item.getStyle("transform");
                let itemRotation = 0;
                if (itemRotStyle)
                    itemRotation = parseFloat(item.getStyle("transform").replaceAll("rotate(", "").replaceAll("deg)", ""));
                let newPos = this._calculateTransform(this._previousSelectionRect, origin, itemPos, inputRotation, inputPos, this._transformMode);
                item.setStyle("left", newPos.x.toString() + "px");
                item.setStyle("top", newPos.y.toString() + "px");
                let rotation;
                if (this._transformMode == 'relative')
                    rotation = itemRotation + inputRotation;
                else
                    rotation = inputRotation;
                while (rotation >= 360)
                    rotation -= 360;
                if (rotation != 0)
                    item.setStyle("transform", "rotate(" + rotation + "deg)");
                else
                    item.removeStyle("transform");
            }
            grp.commit();
        }
    }
    _calculateTransformOriginPosition(selectionRect) {
        switch (this._transformOrigin) {
            case "topLeft":
                return { x: selectionRect.x, y: selectionRect.y };
            case "topMid":
                return { x: selectionRect.x + selectionRect.width / 2, y: selectionRect.y };
            case "topRight":
                return { x: selectionRect.x + selectionRect.width, y: selectionRect.y };
            case "midLeft":
                return { x: selectionRect.x, y: selectionRect.y + selectionRect.height / 2 };
            case "midMid":
                return { x: selectionRect.x + selectionRect.width / 2, y: selectionRect.y + selectionRect.height / 2 };
            case "midRight":
                return { x: selectionRect.x + selectionRect.width, y: selectionRect.y + selectionRect.height / 2 };
            case "botLeft":
                return { x: selectionRect.x, y: selectionRect.y + selectionRect.height };
            case "botMid":
                return { x: selectionRect.x + selectionRect.width / 2, y: selectionRect.y + selectionRect.height };
            case "botRight":
                return { x: selectionRect.x + selectionRect.width, y: selectionRect.y + selectionRect.height };
        }
    }
    _checkOrigin() {
        if (this._originTopLeft.checked)
            this._transformOrigin = "topLeft";
        else if (this._originTopMid.checked)
            this._transformOrigin = "topMid";
        else if (this._originTopRight.checked)
            this._transformOrigin = "topRight";
        else if (this._originMidLeft.checked)
            this._transformOrigin = "midLeft";
        else if (this._originMidMid.checked)
            this._transformOrigin = "midMid";
        else if (this._originMidRight.checked)
            this._transformOrigin = "midRight";
        else if (this._originBotLeft.checked)
            this._transformOrigin = "botLeft";
        else if (this._originBotMid.checked)
            this._transformOrigin = "botMid";
        else if (this._originBotRight.checked)
            this._transformOrigin = "botRight";
    }
    _calculateTransform(selectionRect, origin, itemRect, rotation, inputPos, transformMode) {
        let newPoint;
        // convert deg in rad
        rotation = rotation * (Math.PI / 180);
        if (transformMode == 'absolute') {
            if (inputPos.x)
                inputPos.x = inputPos.x - selectionRect.x;
            if (inputPos.y)
                inputPos.y = inputPos.y - selectionRect.y;
        }
        origin = {
            x: origin.x - itemRect.width / 2,
            y: origin.y - itemRect.height / 2
        };
        let diffItemPosToOrigin = {
            x: itemRect.x - origin.x,
            y: itemRect.y - origin.y
        };
        newPoint = {
            x: Math.cos(rotation) * diffItemPosToOrigin.x - Math.sin(rotation) * diffItemPosToOrigin.y + origin.x + inputPos.x,
            y: Math.sin(rotation) * diffItemPosToOrigin.x + Math.cos(rotation) * diffItemPosToOrigin.y + origin.y + inputPos.y
        };
        return newPoint;
    }
}
customElements.define('node-projects-designer-transformtool-popup', TransformToolPopup);
