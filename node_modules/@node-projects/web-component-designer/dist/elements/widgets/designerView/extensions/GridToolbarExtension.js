import { html } from "@node-projects/base-custom-webcomponent";
import { AbstractExtension } from "../AbstractExtension.js";
import { OverlayLayer } from "../OverlayLayer.js";
export class GridToolbarExtension extends AbstractExtension {
    static template = html `
    <div style="height: 30px; width: 200px;">
      <span>GRID</span>
      <select id="gridType" style="pointer-events: all; height: 24px; width: 60px; padding: 0;">
        <option>1x1</option>
        <option>1x16</option>
        <option>2x8</option>
        <option>4x4</option>
        <option>8x2</option>
        <option>16x1</option>
        <option>custom</option>
      </select>
    </div>
  `;
    _foreignObject;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend(cache, event) {
        const element = GridToolbarExtension.template.content.cloneNode(true);
        element.querySelectorAll('*').forEach(x => x.onpointerdown = (e) => {
            this.designerCanvas.ignoreEvent(e);
            //this._formatSelection(x.dataset['command'], x.dataset['commandParameter'])
        });
        //element.querySelectorAll('select').forEach(x => x.onpointerdown = (e) => this.designerCanvas.ignoreEvent(e));
        const gridTypeEl = element.querySelector('#gridType');
        gridTypeEl.onchange = () => {
            const parts = gridTypeEl.value.split('x');
            this.extendedItem.updateStyleInSheetOrLocal('grid-template-columns', '1fr '.repeat(parseInt(parts[0])).trim());
            this.extendedItem.updateStyleInSheetOrLocal('grid-template-rows', '1fr '.repeat(parseInt(parts[1])).trim());
        };
        //elements.querySelectorAll('select').forEach(x => x.onchange = () => this._formatSelection(x.dataset['command'], x.value));
        //overlay
        const foreignObject = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        this._foreignObject = foreignObject;
        foreignObject.classList.add('svg-toolbar');
        foreignObject.setAttribute('width', '1');
        foreignObject.setAttribute('height', '1');
        foreignObject.appendChild(element);
        this.refresh(cache, event);
        this._addOverlay(foreignObject, OverlayLayer.Foreground);
    }
    refresh(cache, event) {
        if (event) {
            const pos = this.designerCanvas.getNormalizedEventCoordinates(event);
            //debugger;
            this._foreignObject.setAttribute('x', '' + (pos.x - 16));
            this._foreignObject.setAttribute('y', '' + (pos.y - 36));
        }
    }
    dispose() {
        this._removeAllOverlays();
    }
}
