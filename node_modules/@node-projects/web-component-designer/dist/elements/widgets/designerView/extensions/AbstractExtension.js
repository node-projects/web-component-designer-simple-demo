import { AbstractExtensionBase } from "./AbstractExtensionBase.js";
import { OverlayLayer } from './OverlayLayer.js';
export class AbstractExtension extends AbstractExtensionBase {
    extendedItem;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView);
        this.extendedItem = extendedItem;
    }
    remove() {
        this.extensionManager.removeExtensionInstance(this.extendedItem, this);
    }
    createToolbar(template, width, height, overlayLayer = OverlayLayer.Foreground) {
        const element = template.content.cloneNode(true);
        element.querySelectorAll('*').forEach(x => {
            x.onpointerdown = (e) => {
                this.designerCanvas.ignoreEvent(e);
            };
            if (x instanceof HTMLInputElement) {
                x.addEventListener('keydown', (e) => {
                    this.designerCanvas.ignoreEvent(e);
                }, { capture: true });
                x.addEventListener('keyup', (e) => {
                    this.designerCanvas.ignoreEvent(e);
                }, { capture: true });
            }
        });
        const foreignObject = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        foreignObject.classList.add('svg-toolbar-container');
        foreignObject.setAttribute('width', '' + width);
        foreignObject.setAttribute('height', '' + height);
        foreignObject.appendChild(element);
        foreignObject.style.scale = '' + 1 / this.designerCanvas.zoomFactor;
        foreignObject.style.transformBox = 'fill-box';
        this._addOverlay(foreignObject, overlayLayer);
        foreignObject.updatePosition = (position) => {
            foreignObject.style.scale = '' + 1 / this.designerCanvas.zoomFactor;
            const rect = this.overlayLayerView.getBoundingClientRect();
            const innerRect = foreignObject.children[0].getBoundingClientRect();
            const scaleFactor = this.designerCanvas.scaleFactor;
            const effectiveRectWidth = (rect.width / scaleFactor) - this.designerCanvas.canvasOffset.x * scaleFactor;
            if (innerRect.width + (position.x * scaleFactor) > effectiveRectWidth) {
                position.x = (effectiveRectWidth - innerRect.width) / scaleFactor;
            }
            if (position.x < -this.designerCanvas.canvasOffset.x) {
                position.x = -this.designerCanvas.canvasOffset.x;
            }
            foreignObject.setAttribute('x', '' + position.x);
            foreignObject.setAttribute('y', '' + position.y);
        };
        foreignObject.getById = (id) => {
            return foreignObject.querySelector('#' + id);
        };
        return foreignObject;
    }
}
