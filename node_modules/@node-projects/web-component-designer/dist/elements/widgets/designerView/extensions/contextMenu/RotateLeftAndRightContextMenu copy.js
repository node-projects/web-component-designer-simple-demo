import { CommandType } from '../../../../../commandHandling/CommandType.js';
import { NodeType } from '../../../../item/NodeType.js';
export class RotateLeftAndRight {
    shouldProvideContextmenu(event, designerView, designItem, initiator) {
        return !designItem?.isRootItem && designItem?.nodeType == NodeType.Element;
    }
    provideContextMenuItems(event, designerView, designItem) {
        return [
            { title: 'rotate right', icon: `<img src="${new URL('../../../../../../assets/icons/rotateRight.svg', import.meta.url)}">`, action: () => { designerView.executeCommand({ type: CommandType.rotateClockwise }); }, shortCut: 'Ctrl + R' },
            { title: 'rotate left', icon: `<img src="${new URL('../../../../../../assets/icons/rotateLeft.svg', import.meta.url)}">`, action: () => { designerView.executeCommand({ type: CommandType.rotateCounterClockwise }); }, shortCut: 'Ctrl + Shift + R' }
        ];
    }
}
