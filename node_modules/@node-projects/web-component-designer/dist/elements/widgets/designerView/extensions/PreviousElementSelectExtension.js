import { getDesignerCanvasNormalizedTransformedCornerDOMPoints } from '../../../helper/TransformHelper.js';
import { AbstractExtension } from './AbstractExtension.js';
export class PreviousElementSelectExtension extends AbstractExtension {
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    _path;
    _rect;
    _clickRect;
    _g;
    extend(cache, event) {
        this.refresh(cache, event);
    }
    refresh(cache, event) {
        const transformedCornerPoints = getDesignerCanvasNormalizedTransformedCornerDOMPoints(this.extendedItem.element, null, this.designerCanvas, cache);
        if (!isNaN(transformedCornerPoints[1].x)) {
            if (this._valuesHaveChanges(transformedCornerPoints[0].x, transformedCornerPoints[0].y, transformedCornerPoints[1].x, transformedCornerPoints[1].y, this.designerCanvas.scaleFactor)) {
                const angle = Math.atan2((transformedCornerPoints[1].y - transformedCornerPoints[0].y), (transformedCornerPoints[1].x - transformedCornerPoints[0].x)) * 180 / Math.PI;
                const h = (16 / this.designerCanvas.scaleFactor);
                this._rect = this._drawRect(0, 0, h, h, 'svg-previous-select', this._rect);
                this._clickRect = this._drawRect(0, 0, h, h + 3, 'svg-invisible', this._clickRect);
                if (!this._g) {
                    this._g = document.createElementNS("http://www.w3.org/2000/svg", "g");
                    this._g.setAttribute('class', 'svg-previous-select');
                    this._path = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    this._path.setAttribute('d', 'm4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z');
                    this._g.appendChild(this._rect);
                    this._g.appendChild(this._path);
                    this._addOverlay(this._g);
                    this._clickRect.onpointerdown = (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        this.extendedItem.instanceServiceContainer.selectionService.setSelectedElements([this.extendedItem.parent]);
                    };
                    this._clickRect.onpointermove = (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                    };
                    this._g.appendChild(this._clickRect);
                }
                this._path.style.scale = (0.6 / this.designerCanvas.scaleFactor).toString();
                this._g.style.transform = 'translate(' + (transformedCornerPoints[1].x - (14.5 / this.designerCanvas.scaleFactor)) + 'px,' + (transformedCornerPoints[1].y - (15.5 / this.designerCanvas.scaleFactor)) + 'px) rotate(' + angle + 'deg)';
                this._g.style.transformOrigin = '100% 100%';
                this._g.style.transformBox = 'fill-box';
            }
        }
    }
    dispose() {
        this._removeAllOverlays();
    }
}
