import { AbstractExtension } from './AbstractExtension.js';
export class IframeExtension extends AbstractExtension {
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend() {
        // forward events to designer, so iframe is selectable via click
        let iframe = this.extendedItem.element;
        iframe.contentWindow.addEventListener('pointerdown', (e) => this._pointerEvent(e), { capture: true });
        iframe.contentWindow.addEventListener('pointermove', (e) => this._pointerEvent(e), { capture: true });
        iframe.contentWindow.addEventListener('pointerup', (e) => this._pointerEvent(e), { capture: true });
    }
    _pointerEvent(event) {
        const rect = this.extendedItem.element.getBoundingClientRect();
        const that = this;
        const handler = {
            get(target, property) {
                switch (property) {
                    case 'composedPath':
                        return () => [that.extendedItem.element];
                    case 'x':
                    case 'clientX':
                    case 'offsetX':
                    case 'pageX':
                        return target[property] + rect.x;
                    case 'y':
                    case 'clientY':
                    case 'offsetY':
                    case 'pageY':
                        return target[property] + rect.y;
                }
                return target[property];
            }
        };
        event.preventDefault();
        event.stopPropagation();
        const proxy = new Proxy(event, handler);
        //@ts-ignore
        this.designerCanvas._pointerEventHandlerBound(proxy);
    }
    refresh() {
    }
    dispose() {
        this._removeAllOverlays();
    }
}
