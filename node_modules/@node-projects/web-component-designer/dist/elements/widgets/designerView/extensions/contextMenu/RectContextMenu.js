import { DesignItem } from '../../../../item/DesignItem.js';
import { DeleteAction } from '../../../../services/undoService/transactionItems/DeleteAction.js';
import { InsertAction } from '../../../../services/undoService/transactionItems/InsertAction.js';
export class RectContextMenu {
    shouldProvideContextmenu(event, designerView, designItem, initiator) {
        if (designItem.element instanceof SVGRectElement)
            return true;
        return false;
    }
    provideContextMenuItems(event, designerCanvas, designItem) {
        return [
            {
                title: 'convert to path', action: () => {
                    let rect = designItem.element;
                    let pathD = "";
                    pathD += "M" + rect.x.baseVal.value + " " + rect.y.baseVal.value +
                        "L" + (rect.x.baseVal.value + rect.width.baseVal.value) + " " + rect.y.baseVal.value +
                        "L" + (rect.x.baseVal.value + rect.width.baseVal.value) + " " + (rect.y.baseVal.value + rect.height.baseVal.value) +
                        "L" + rect.x.baseVal.value + " " + (rect.y.baseVal.value + rect.height.baseVal.value) +
                        "Z";
                    const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
                    path.setAttribute("d", pathD);
                    path.setAttribute("stroke", rect.getAttribute("stroke"));
                    path.setAttribute("fill", rect.getAttribute("fill"));
                    path.setAttribute("stroke-width", rect.getAttribute("stroke-width"));
                    const di = DesignItem.createDesignItemFromInstance(path, designerCanvas.serviceContainer, designerCanvas.instanceServiceContainer);
                    designerCanvas.instanceServiceContainer.undoService.execute(new InsertAction(designItem.parent, designItem.childCount, di));
                    designerCanvas.instanceServiceContainer.undoService.execute(new DeleteAction([designItem]));
                }
            }
        ];
    }
}
