import { html } from "@node-projects/base-custom-webcomponent";
import { AbstractExtension } from "../AbstractExtension.js";
import { assetsPath } from "../../../../../Constants.js";
export class BlockToolbarExtension extends AbstractExtension {
    static template = html `
    <div style="height: 100%; width: 100%;">
      <node-projects-image-button-list-selector>
        <img data-value="block" title="block" src="${assetsPath}images/display/block.svg">
        <img data-value="inline" title="inline" src="${assetsPath}images/display/inline.svg">
      </node-projects-image-button-list-selector>
      <select title="display" id="displayType" style="pointer-events: all; height: 24px; width: 70px; padding: 0; font-weight: 900; text-transform: uppercase; margin-right: 10px;">
        <option selected>block</option>
        <option>flex</option>
        <option>grid</option>
      </select>
    </div>
  `;
    _toolbar;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend(cache, event) {
        this._toolbar = this.createToolbar(BlockToolbarExtension.template, 200, 30);
        const displayTypeEl = this._toolbar.getById('displayType');
        displayTypeEl.onchange = () => {
            this.extendedItem.updateStyleInSheetOrLocal('display', displayTypeEl.value);
            this.extensionManager.reapplyAllAppliedExtentions([this.extendedItem]);
        };
        this.refresh(cache, event);
    }
    refresh(cache, event) {
        if (event) {
            const pos = this.designerCanvas.getNormalizedEventCoordinates(event);
            this._toolbar.updatePosition({ x: (pos.x - (16 / this.designerCanvas.zoomFactor)), y: (pos.y - (44 / this.designerCanvas.zoomFactor)) });
        }
    }
    dispose() {
        this._removeAllOverlays();
    }
}
