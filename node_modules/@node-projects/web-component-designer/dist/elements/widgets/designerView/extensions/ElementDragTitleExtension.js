import { NamedTools } from "../tools/NamedTools.js";
import { AbstractExtension } from './AbstractExtension.js';
export class ElementDragTitleExtension extends AbstractExtension {
    _rect;
    _text;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend() {
        const boundRect = this.extendedItem.element.getBoundingClientRect();
        this._rect = this._drawRect((boundRect.x - this.designerCanvas.containerBoundingRect.x) / this.designerCanvas.scaleFactor, (boundRect.y - this.designerCanvas.containerBoundingRect.y) / this.designerCanvas.scaleFactor - 16, 60, 15, 'svg-primary-selection-move', this._rect);
        this._text = this._drawText(this.extendedItem.name.substring(0, 10) + 'â€¦', (boundRect.x - this.designerCanvas.containerBoundingRect.x) / this.designerCanvas.scaleFactor, (boundRect.y - this.designerCanvas.containerBoundingRect.y) / this.designerCanvas.scaleFactor - 5, 'svg-text-primary', this._text);
        this._rect.addEventListener('pointerdown', (e) => this._pointerEvent(e));
        this._rect.addEventListener('pointermove', (e) => this._pointerEvent(e));
        this._rect.addEventListener('pointerup', (e) => this._pointerEvent(e));
    }
    _drawMoveOverlay(itemRect) {
    }
    refresh() {
        const boundRect = this.extendedItem.element.getBoundingClientRect();
        const xr = (boundRect.x - this.designerCanvas.containerBoundingRect.x) / this.designerCanvas.scaleFactor;
        const yr = (boundRect.y - this.designerCanvas.containerBoundingRect.y) / this.designerCanvas.scaleFactor - 16;
        this._rect.setAttribute('x', xr);
        this._rect.setAttribute('y', yr);
        const x = (boundRect.x - this.designerCanvas.containerBoundingRect.x) / this.designerCanvas.scaleFactor;
        const y = (boundRect.y - this.designerCanvas.containerBoundingRect.y) / this.designerCanvas.scaleFactor - 5;
        this._text.setAttribute('x', x);
        this._text.setAttribute('y', y);
    }
    _pointerEvent(event) {
        event.preventDefault();
        event.stopPropagation();
        this.designerCanvas.serviceContainer.designerTools.get(NamedTools.Pointer).pointerEventHandler(this.designerCanvas, event, this.extendedItem.element);
    }
    dispose() {
        this._removeAllOverlays();
    }
}
