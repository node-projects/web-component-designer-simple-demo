import { getDesignerCanvasNormalizedTransformedCornerDOMPoints } from '../../../helper/TransformHelper.js';
import { NodeType } from '../../../item/NodeType.js';
import { AbstractExtension } from './AbstractExtension.js';
export class SelectionDefaultExtension extends AbstractExtension {
    _line1;
    _line2;
    _line3;
    _line4;
    constructor(extensionManager, designerView, extendedItem) {
        super(extensionManager, designerView, extendedItem);
    }
    extend() {
        this.refresh();
    }
    refresh() {
        let transformedCornerPoints;
        if (this.extendedItem.nodeType == NodeType.TextNode) {
            let rect = this.designerCanvas.getNormalizedElementCoordinates(this.extendedItem.element);
            transformedCornerPoints = [{ x: rect.x, y: rect.y }, { x: rect.x + rect.width, y: rect.y }, { x: rect.x, y: rect.y + rect.height }, { x: rect.x + rect.width, y: rect.y + rect.height }];
        }
        else
            transformedCornerPoints = getDesignerCanvasNormalizedTransformedCornerDOMPoints(this.extendedItem.element, null, this.designerCanvas);
        this._line1 = this._drawLine(transformedCornerPoints[0].x, transformedCornerPoints[0].y, transformedCornerPoints[1].x, transformedCornerPoints[1].y, 'svg-selection', this._line1);
        this._line2 = this._drawLine(transformedCornerPoints[0].x, transformedCornerPoints[0].y, transformedCornerPoints[2].x, transformedCornerPoints[2].y, 'svg-selection', this._line2);
        this._line3 = this._drawLine(transformedCornerPoints[1].x, transformedCornerPoints[1].y, transformedCornerPoints[3].x, transformedCornerPoints[3].y, 'svg-selection', this._line3);
        this._line4 = this._drawLine(transformedCornerPoints[2].x, transformedCornerPoints[2].y, transformedCornerPoints[3].x, transformedCornerPoints[3].y, 'svg-selection', this._line4);
        this._line1.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
        this._line2.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
        this._line3.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
        this._line4.style.strokeWidth = (2 / this.designerCanvas.zoomFactor).toString();
    }
    dispose() {
        this._removeAllOverlays();
    }
}
