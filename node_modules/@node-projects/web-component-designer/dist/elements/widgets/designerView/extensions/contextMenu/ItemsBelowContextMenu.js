import { DesignItem } from '../../../../item/DesignItem.js';
export class ItemsBelowContextMenu {
    shouldProvideContextmenu(event, designerView, designItem, initiator) {
        return initiator == 'designer';
    }
    provideContextMenuItems(event, designerView, designItem) {
        const lstItems = this._searchForItemsBelow(event, designerView);
        if (lstItems.length > 0) {
            //TODO: create a submenu 'select items below...'
            return [{ title: '-' }, ...lstItems.map(x => ({ title: 'select: ' + x.localName + (x.id ? ' (' + x.id + ')' : ''), action: () => this._select(designerView, x) }))];
        }
        return [];
    }
    _select(designerView, element) {
        const item = DesignItem.GetOrCreateDesignItem(element, designerView.serviceContainer, designerView.instanceServiceContainer);
        designerView.instanceServiceContainer.selectionService.setSelectedElements([item]);
    }
    _searchForItemsBelow(event, designerView) {
        const lstEl = [];
        //search for containers below mouse cursor.
        //to do this, we need to disable pointer events for each in a loop and search wich element is there
        let backupPEventsMap = new Map();
        try {
            let el = designerView.elementFromPoint(event.x, event.y);
            backupPEventsMap.set(el, el.style.pointerEvents);
            el.style.pointerEvents = 'none';
            if (el !== designerView.rootDesignItem.element) {
                el = designerView.elementFromPoint(event.x, event.y);
                while (el != null) {
                    if (el === designerView.rootDesignItem.element)
                        break;
                    if (el !== designerView.overlayLayer && el.parentElement !== designerView.overlayLayer && el.getRootNode() === designerView.shadowRoot)
                        lstEl.push(el);
                    if (!backupPEventsMap.has(el))
                        backupPEventsMap.set(el, el.style.pointerEvents);
                    el.style.pointerEvents = 'none';
                    const oldEl = el;
                    el = designerView.elementFromPoint(event.x, event.y);
                    if (oldEl === el)
                        break;
                }
            }
        }
        finally {
            for (let e of backupPEventsMap.entries()) {
                e[0].style.pointerEvents = e[1];
            }
        }
        return lstEl;
    }
}
