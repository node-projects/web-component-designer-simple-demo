export class AbstractExtension {
    overlays = [];
    overlayLayerView;
    extensionManager;
    designerView;
    extendedItem;
    constructor(extensionManager, designerView, extendedItem) {
        this.extensionManager = extensionManager;
        this.designerView = designerView;
        this.extendedItem = extendedItem;
        this.overlayLayerView = designerView.overlayLayer;
    }
    _removeAllOverlays() {
        for (let o of this.overlays) {
            try {
                this.overlayLayerView.removeOverlay(o);
            }
            catch (err) {
                console.error(err);
            }
        }
        this.overlays = [];
    }
    _drawLine(x1, y1, x2, y2, className, line, overlayLayer) {
        const newLine = this.overlayLayerView.drawLine(x1, y1, x2, y2, className, line, overlayLayer);
        if (!line) {
            this.overlays.push(newLine);
        }
        return newLine;
    }
    _drawCircle(x, y, radius, className, circle, overlayLayer) {
        const newCircle = this.overlayLayerView.drawCircle(x, y, radius, className, circle, overlayLayer);
        if (!circle) {
            this.overlays.push(newCircle);
        }
        return circle;
    }
    _drawRect(x, y, w, h, className, rect, overlayLayer) {
        const newRect = this.overlayLayerView.drawRect(x, y, w, h, className, rect, overlayLayer);
        if (!rect) {
            this.overlays.push(newRect);
        }
        return newRect;
    }
    _drawText(text, x, y, className, textEl, overlayLayer) {
        const newText = this.overlayLayerView.drawText(text, x, y, className, textEl, overlayLayer);
        if (!textEl) {
            this.overlays.push(newText);
        }
        return newText;
    }
}
