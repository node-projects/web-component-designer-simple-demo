import { AbstractExtension } from "./AbstractExtension.js";
export class CanvasExtension extends AbstractExtension {
  constructor(extensionManager, designerView, extendedItem) {
    super(extensionManager, designerView, extendedItem);
  }

  extend() {
    let itemRect = this.extendedItem.element.getBoundingClientRect();
    const computedStyle = getComputedStyle(this.extendedItem.element);

    if (computedStyle.margin !== '0px') {
      const xOffset = itemRect.x - this.designerView.containerBoundingRect.x;
      const yOffset = itemRect.y - this.designerView.containerBoundingRect.y;
      const left = Number.parseFloat(computedStyle.marginLeft.replace('px', ''));
      const top = Number.parseFloat(computedStyle.marginTop.replace('px', ''));
      const right = Number.parseFloat(computedStyle.marginRight.replace('px', ''));
      const bottom = Number.parseFloat(computedStyle.marginBottom.replace('px', ''));

      this._drawRect(xOffset - left, yOffset - top, left + itemRect.width + right, top, 'svg-margin');

      this._drawRect(xOffset - left, yOffset, left, itemRect.height, 'svg-margin');

      this._drawRect(xOffset + itemRect.width, yOffset, right, itemRect.height, 'svg-margin');

      this._drawRect(xOffset - left, yOffset + itemRect.height, left + itemRect.width + right, bottom, 'svg-margin');
    }
  }

  refresh() {
    this._removeAllOverlays();

    this.extend();
  }

  dispose() {
    this._removeAllOverlays();
  }

}