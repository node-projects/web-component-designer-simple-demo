import { BaseCustomWebComponentLazyAppend, css } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
export class BindableObjectsBrowser extends BaseCustomWebComponentLazyAppend {
    _treeDiv;
    _tree;
    _filter;
    static style = css `
      span.drag-source {
        border: 1px solid grey;
        border-radius: 3px;
        padding: 2px;
        background-color: silver;
      }

      span.fancytree-node.fancytree-drag-source {
        outline: 1px dotted grey;
      }
      span.fancytree-node.fancytree-drop-accept {
        outline: 1px dotted green;
      }
      span.fancytree-node.fancytree-drop-reject {
        outline: 1px dotted red;
      }
      #tree ul {
        border: none;
      }
      #tree ul:focus {
        outline: none;
      }
    `;
    constructor() {
        super();
        let externalCss = document.createElement('style');
        externalCss.innerHTML = '@import url("./node_modules/jquery.fancytree/dist/skin-win8/ui.fancytree.css");';
        this.shadowRoot.appendChild(externalCss);
        this._filter = document.createElement('input');
        this._filter.style.width = '100%';
        this._filter.placeholder = 'Filter...';
        this._filter.autocomplete = 'off';
        this._filter.onkeyup = () => {
            let match = this._filter.value;
            this._tree.filterNodes((node) => {
                return new RegExp(match, "i").test(node.title);
            });
        };
        this.shadowRoot.appendChild(this._filter);
        this._treeDiv = document.createElement('div');
        this._treeDiv.style.height = '100%';
        this._treeDiv.style.overflow = 'auto';
        this._treeDiv.setAttribute('id', 'tree');
        this.shadowRoot.appendChild(this._treeDiv);
    }
    async ready() {
        $(this._treeDiv).fancytree({
            icon: false,
            extensions: ['filter'],
            quicksearch: true,
            source: [],
            lazyLoad: this.lazyLoad,
            filter: {
                autoApply: true,
                autoExpand: false,
                counter: true,
                fuzzy: true,
                hideExpandedCounter: true,
                hideExpanders: false,
                highlight: true,
                leavesOnly: false,
                nodata: true,
                mode: "hide" // Grayout unmatched nodes (pass "hide" to remove unmatched node instead)
            }
        });
        //@ts-ignore
        this._tree = $.ui.fancytree.getTree(this._treeDiv);
        this._treeDiv.children[0].classList.add('fancytree-connectors');
    }
    lazyLoad(event, data) {
        data.result = new Promise(resolve => {
        });
    }
    createTree(rootItem) {
        if (this._tree) {
            this._recomputeTree(rootItem);
        }
    }
    selectionChanged(event) {
        if (event.selectedElements.length > 0) {
            this._highlight(event.selectedElements);
        }
    }
    _recomputeTree(rootItem) {
        this._tree.getRootNode().removeChildren();
        this._getChildren(rootItem, null);
        //@ts-ignore
        this._tree.getRootNode().updateCounters();
    }
    _getChildren(item, currentNode) {
        if (currentNode == null) {
            currentNode = this._tree.getRootNode();
        }
        const newNode = currentNode.addChildren({
            title: item.name + " " + (item.id ? ('#' + item.id) : ''),
            folder: item.children.length > 0 ? true : false,
            //@ts-ignore
            ref: item
        });
        for (let i of item.children()) {
            this._getChildren(i, newNode);
        }
    }
    _highlight(activeElements) {
        if (activeElements != null) {
            this._tree.visit((node) => {
                //@ts-ignore
                if (activeElements.indexOf(node.data.ref) >= 0) {
                    node.setSelected(true);
                }
                else {
                    node.setSelected(false);
                }
            });
        }
    }
}
customElements.define('node-projects-bindable-objects-browser', BindableObjectsBrowser);
