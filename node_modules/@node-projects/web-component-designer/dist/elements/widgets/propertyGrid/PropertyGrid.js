import { PropertyGridPropertyList } from './PropertyGridPropertyList.js';
import { DesignerTabControl } from '../../controls/DesignerTabControl.js';
import { BaseCustomWebComponentLazyAppend, css } from '/web-component-designer-demo/node_modules/@node-projects/base-custom-webcomponent/./dist/index.js';
import { CssPropertiesService } from '../../services/propertiesService/services/CssPropertiesService.js';
import { CommonPropertiesService } from '../../services/propertiesService/services/CommonPropertiesService.js';
import { AttributesPropertiesService } from '../../services/propertiesService/services/AttributesPropertiesService.js';
export class PropertyGrid extends BaseCustomWebComponentLazyAppend {
    _serviceContainer;
    _designerTabControl;
    _selectedItems;
    _propertyGridPropertyLists;
    _itemsObserver;
    static style = css `
    :host {
      display: block;
      height: 100%;
      user-select: none;
    }
    iron-pages {
      overflow: hidden;
      height: 250px;
      background: var(--medium-grey, #2f3545);
      color: white;
    }
    button:hover {
      box-shadow: inset 0 3px 0 var(--light-grey);
    }
    button:focus {
      box-shadow: inset 0 3px 0 var(--highlight-pink, #e91e63);
    }
    `;
    constructor() {
        super();
        this._designerTabControl = new DesignerTabControl();
        this.shadowRoot.appendChild(this._designerTabControl);
        this.addEventListener('contextmenu', (e) => {
            if (e.composedPath()[0].localName != 'input')
                e.preventDefault();
        });
        this._itemsObserver = new MutationObserver((m) => {
            for (const a of this._propertyGridPropertyLists) {
                a.refreshForDesignItems(this._selectedItems);
            }
        });
    }
    set serviceContainer(value) {
        this._serviceContainer = value;
        this._propertyGridPropertyLists = [];
        let elementPropertyEditorAttributeList = new PropertyGridPropertyList(value);
        elementPropertyEditorAttributeList.setPropertiesService(new CssPropertiesService("styles")); //This is replace in selectedItems
        elementPropertyEditorAttributeList.title = "properties";
        this._designerTabControl.appendChild(elementPropertyEditorAttributeList);
        this._propertyGridPropertyLists.push(elementPropertyEditorAttributeList);
        let attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new AttributesPropertiesService());
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "attributes";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CommonPropertiesService());
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "common";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CssPropertiesService("set-styles"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "set-styles";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CssPropertiesService("styles"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "styles";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CssPropertiesService("alignment"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "alignment";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CssPropertiesService("grid"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "grid";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        attributeEditorAttributeList = new PropertyGridPropertyList(value);
        attributeEditorAttributeList.setPropertiesService(new CssPropertiesService("flex"));
        attributeEditorAttributeList.createElements(null);
        attributeEditorAttributeList.title = "flex";
        this._designerTabControl.appendChild(attributeEditorAttributeList);
        this._propertyGridPropertyLists.push(attributeEditorAttributeList);
        this._designerTabControl.selectedIndex = 0;
    }
    get serviceContainer() {
        return this._serviceContainer;
    }
    get selectedItems() {
        return this._selectedItems;
    }
    set selectedItems(items) {
        this._selectedItems = items;
        if (this.selectedItems && this.selectedItems.length > 0) {
            const propService = this._serviceContainer.getLastServiceWhere('propertyService', x => x.isHandledElement(this.selectedItems[0]));
            this._propertyGridPropertyLists[0].setPropertiesService(propService);
            this._propertyGridPropertyLists[0].createElements(this.selectedItems[0]);
            this._propertyGridPropertyLists[1].createElements(this.selectedItems[0]);
            this._propertyGridPropertyLists[3].createElements(this.selectedItems[0]);
        }
        for (const a of this._propertyGridPropertyLists) {
            a.designItemsChanged(items);
        }
        if (items) {
            if (items.length == 1) {
                for (const a of this._propertyGridPropertyLists) {
                    a.designItemsChanged(items);
                    a.refreshForDesignItems(items);
                }
                this._observeItems();
                /*let properties = serviceContainer.forSomeServicesTillResult("propertyService", x => x.getProperties(element));
        
                if (properties) {
                  let attributeEditorAttributeList = new PropertyGridPropertyList();
                  attributeEditorAttributeList.serviceContainer = this.serviceContainer;
                  // attributeEditorAttributeList.title =
                  attributeEditorAttributeList.createElements(properties);
                  this._designerTabControl.appendChild(attributeEditorAttributeList);
                }*/
            }
        }
        else {
            this._itemsObserver.disconnect();
        }
    }
    _observeItems() {
        this._itemsObserver.disconnect();
        this._itemsObserver.observe(this._selectedItems[0].element, { attributes: true, childList: false, characterData: false });
    }
}
customElements.define('node-projects-property-grid', PropertyGrid);
